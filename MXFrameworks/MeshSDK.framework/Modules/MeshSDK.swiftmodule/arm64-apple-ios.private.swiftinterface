// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name MeshSDK
import CoreBluetooth
import CryptoSwift
import Foundation
@_exported import MeshSDK
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public struct ConfigHeartbeatPublicationSet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let destination: MeshSDK.Address
  public let countLog: Swift.UInt8
  public var count: MeshSDK.RemainingHeartbeatPublicationCount {
    get
  }
  public let periodLog: Swift.UInt8
  public var period: Swift.UInt16 {
    get
  }
  public let ttl: Swift.UInt8
  public let features: MeshSDK.NodeFeatures
  public var enablesPublication: Swift.Bool {
    get
  }
  public var enablesPeriodicPublication: Swift.Bool {
    get
  }
  public var enablesFeatureTriggeredPublication: Swift.Bool {
    get
  }
  public init()
  public init?(startSending countLog: Swift.UInt8, heartbeatMessagesEvery periodLog: Swift.UInt8, secondsTo destination: MeshSDK.Address, usingTtl ttl: Swift.UInt8, andNetworkKey networkKey: MeshSDK.NetworkKey, andEnableHeartbeatMessagesTriggeredByChangeOf features: MeshSDK.NodeFeatures = [])
  public init?(startSendingHeartbeatMessagesTo destination: MeshSDK.Address, usingTtl ttl: Swift.UInt8, andNetworkKey networkKey: MeshSDK.NetworkKey, triggeredByChangeOf features: MeshSDK.NodeFeatures)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTemperatureRangeGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct SensorSettingsGet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty)
  public init?(parameters: Foundation.Data)
}
public struct GenericDeltaSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var continueTransaction: Swift.Bool
  public var parameters: Foundation.Data? {
    get
  }
  public let delta: Swift.Int32
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(delta: Swift.Int32)
  public init(delta: Swift.Int32, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTemperatureRangeSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let min: Swift.UInt16
  public let max: Swift.UInt16
  public var range: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(_ range: Swift.ClosedRange<Swift.UInt16>)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let hue: Swift.UInt16
  public let saturation: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16)
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
extension Foundation.UserDefaults {
  public func lastSeqAuthValue(for source: MeshSDK.Address) -> Swift.UInt64?
  public func storeLastSeqAuthValue(_ value: Swift.UInt64, for source: MeshSDK.Address)
  public func previousSeqAuthValue(for source: MeshSDK.Address) -> Swift.UInt64?
  public func storePreviousSeqAuthValue(_ value: Swift.UInt64, for source: MeshSDK.Address)
  public func removeSeqAuthValues(of node: MeshSDK.Node)
  public func removeSeqAuthValues(of source: MeshSDK.Address)
}
public struct SensorGet : MeshSDK.AcknowledgedSensorMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty?
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ property: MeshSDK.DeviceProperty? = nil)
  public init?(parameters: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class ApplicationKey : MeshSDK.Key, Swift.Codable {
  public var name: Swift.String
  public var index: MeshSDK.KeyIndex {
    get
  }
  public var boundNetworkKeyIndex: MeshSDK.KeyIndex {
    get
  }
  public var key: Foundation.Data {
    get
  }
  public var oldKey: Foundation.Data? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension MeshSDK.ApplicationKey : Swift.Equatable {
  public static func == (lhs: MeshSDK.ApplicationKey, rhs: MeshSDK.ApplicationKey) -> Swift.Bool
  public static func != (lhs: MeshSDK.ApplicationKey, rhs: MeshSDK.ApplicationKey) -> Swift.Bool
}
extension MeshSDK.ApplicationKey : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct SensorColumnStatus : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public let property: MeshSDK.DeviceProperty
  public let result: Foundation.Data
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, result: Foundation.Data)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessLastGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightHSLHueGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigSIGModelSubscriptionList : MeshSDK.ConfigModelSubscriptionList {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.ConfigMessageStatus
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let addresses: [MeshSDK.Address]
  public init(responseTo request: MeshSDK.ConfigSIGModelSubscriptionGet, with addresses: [MeshSDK.Address])
  public init(responseTo request: MeshSDK.ConfigSIGModelSubscriptionGet, with status: MeshSDK.ConfigMessageStatus)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Scene {
  public var isUsed: Swift.Bool {
    get
  }
}
extension Swift.Array where Element == MeshSDK.Scene {
  public subscript(number: MeshSDK.SceneNumber) -> MeshSDK.Scene? {
    get
  }
}
public struct SensorSettingGet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public let settingProperty: MeshSDK.DeviceProperty
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ setting: MeshSDK.DeviceProperty, of property: MeshSDK.DeviceProperty)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func subscribeMeshProxyFilter(address: Swift.UInt16)
  @objc dynamic public func unsubscribeMeshProxyFilter(address: Swift.UInt16)
}
extension MeshSDK.MeshSDK : MeshSDK.ProxyFilterDelegate {
  public func proxyFilterUpdated(type: MeshSDK.ProxyFilerType, addresses: Swift.Set<MeshSDK.Address>)
  public func proxyFilterUpdateAcknowledged(type: MeshSDK.ProxyFilerType, listSize: Swift.UInt16)
}
public struct LightLCOccupancyModeStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ mode: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
public enum LogLevel : Swift.Int {
  case debug
  case verbose
  case info
  case application
  case warning
  case error
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum LogCategory : Swift.String {
  case bearer
  case proxy
  case network
  case lowerTransport
  case upperTransport
  case access
  case foundationModel
  case model
  case provisioning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LoggerDelegate : AnyObject {
  func log(message: Swift.String, ofCategory category: MeshSDK.LogCategory, withLevel level: MeshSDK.LogLevel)
}
public struct LightHSLRangeSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let minHue: Swift.UInt16
  public let maxHue: Swift.UInt16
  public let minSaturation: Swift.UInt16
  public let maxSaturation: Swift.UInt16
  public var hueRange: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public var saturationRange: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(hueRange: Swift.ClosedRange<Swift.UInt16>, saturationRange: Swift.ClosedRange<Swift.UInt16>)
  public init?(parameters: Foundation.Data)
}
public enum MeshMessageSecurity {
  case low
  case high
  public static func == (a: MeshSDK.MeshMessageSecurity, b: MeshSDK.MeshMessageSecurity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BaseMeshMessage {
  var parameters: Foundation.Data? { get }
  init?(parameters: Foundation.Data)
}
public protocol MeshMessage : MeshSDK.BaseMeshMessage {
  var opCode: Swift.UInt32 { get }
  var security: MeshSDK.MeshMessageSecurity { get }
  var isSegmented: Swift.Bool { get }
}
public protocol AcknowledgedMeshMessage : MeshSDK.MeshMessage {
  var responseOpCode: Swift.UInt32 { get }
}
public protocol StaticMeshMessage : MeshSDK.MeshMessage {
  static var opCode: Swift.UInt32 { get }
}
public protocol StaticAcknowledgedMeshMessage : MeshSDK.AcknowledgedMeshMessage, MeshSDK.StaticMeshMessage {
  static var responseType: any MeshSDK.StaticMeshMessage.Type { get }
}
public protocol StatusMessage : MeshSDK.MeshMessage {
  var isSuccess: Swift.Bool { get }
  var message: Swift.String { get }
}
public protocol TransactionMessage : MeshSDK.MeshMessage {
  var tid: Swift.UInt8! { get set }
  var continueTransaction: Swift.Bool { get }
}
public protocol TransitionMessage : MeshSDK.MeshMessage {
  var transitionTime: MeshSDK.TransitionTime? { get }
  var delay: Swift.UInt8? { get }
}
public protocol TransitionStatusMessage : MeshSDK.MeshMessage {
  var remainingTime: MeshSDK.TransitionTime? { get }
}
extension MeshSDK.MeshMessage {
  public var security: MeshSDK.MeshMessageSecurity {
    get
  }
  public var isSegmented: Swift.Bool {
    get
  }
}
extension MeshSDK.TransactionMessage {
  public var continueTransaction: Swift.Bool {
    get
  }
  public func isNewTransaction(previousTid: Swift.UInt8, timestamp: Foundation.Date) -> Swift.Bool
}
extension MeshSDK.StaticMeshMessage {
  public var opCode: Swift.UInt32 {
    get
  }
}
extension MeshSDK.StaticAcknowledgedMeshMessage {
  public var responseOpCode: Swift.UInt32 {
    get
  }
}
extension MeshSDK.MeshMessageSecurity : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.NetworkKey {
  public var isPrimary: Swift.Bool {
    get
  }
  public var isSecondary: Swift.Bool {
    get
  }
  public func isUsed(in meshNetwork: MeshSDK.MeshNetwork) -> Swift.Bool
}
public struct RemoveAddressesFromFilter : MeshSDK.StaticAcknowledgedProxyConfigurationMessage {
  public static let opCode: Swift.UInt8
  public static let responseType: any MeshSDK.StaticProxyConfigurationMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let addresses: Swift.Set<MeshSDK.Address>
  public init(_ addresses: Swift.Set<MeshSDK.Address>)
  public init?(parameters: Foundation.Data)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class MXMeshProvisioning : ObjectiveC.NSObject {
  @objc public static let shared: MeshSDK.MXMeshProvisioning
  @objc weak public var provisioningDelegate: (any MeshSDK.MXMeshProvisioningDelegate)?
  public typealias MXMeshProvisioningCallback = (_ code: Swift.Int, _ nk: Swift.String, _ uuid: Swift.String, _ bearer: MeshSDK.MXPBGattBearer) -> ()
  @objc public var provisioningCallback: MeshSDK.MXMeshProvisioning.MXMeshProvisioningCallback?
  @objc override dynamic public init()
  @objc public func mxProvisioningCancel()
  @objc public func mxProvisioningFinish(_ code: Swift.Int)
  @objc deinit
  @objc convenience public init(device: MeshSDK.UnprovisionedDevice, peripheral: CoreBluetooth.CBPeripheral, networkKey: Swift.String)
  @objc public func connectUnprovisionedDevice(device: MeshSDK.UnprovisionedDevice, peripheral: CoreBluetooth.CBPeripheral, networkKey: Swift.String)
  @objc public func identifyNode()
  @objc public func setProvisionUnicastAddress(address: Swift.Int)
  @objc public func startProvisioning()
}
extension MeshSDK.MXMeshProvisioning : MeshSDK.ProvisioningDelegate {
  public func authenticationActionRequired(_ action: MeshSDK.AuthAction)
  @objc dynamic public func inputComplete()
  public func provisioningState(of unprovisionedDevice: MeshSDK.UnprovisionedDevice, didChangeTo state: MeshSDK.ProvisioningState)
}
extension MeshSDK.MXMeshProvisioning : MeshSDK.GattBearerDelegate {
  public func bearer(_ bearer: any MeshSDK.Bearer, didClose error: (any Swift.Error)?)
  public func bearerDidSwitchedToProxy(_ bearer: any MeshSDK.Bearer)
  public func bearerDidOpen(_ bearer: any MeshSDK.Bearer)
  public func bearerDidDiscoverServices(_ bearer: any MeshSDK.Bearer)
  public func bearerDidConnect(_ bearer: any MeshSDK.Bearer)
}
extension MeshSDK.MXMeshProvisioning : MeshSDK.LoggerDelegate {
  public func log(message: Swift.String, ofCategory category: MeshSDK.LogCategory, withLevel level: MeshSDK.LogLevel)
}
public enum LowerTransportError : Swift.Error {
  case timeout
  case busy
  case replayAttack
  public static func == (a: MeshSDK.LowerTransportError, b: MeshSDK.LowerTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.LowerTransportError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct LightHSLSaturationStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let saturation: Swift.UInt16
  public let targetSaturation: Swift.UInt16?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(saturation: Swift.UInt16)
  public init(saturation: Swift.UInt16, targetSaturation: Swift.UInt16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.ApplicationKey {
  public func bind(to networkKey: MeshSDK.NetworkKey) throws
  public func isBound(to networkKey: MeshSDK.NetworkKey) -> Swift.Bool
  public func isBound(toAnyOf networkKeys: [MeshSDK.NetworkKey]) -> Swift.Bool
  public var boundNetworkKey: MeshSDK.NetworkKey {
    get
  }
}
extension Swift.Array where Element == MeshSDK.ApplicationKey {
  public func contains(keyBoundTo networkKey: MeshSDK.NetworkKey) -> Swift.Bool
  public func boundTo(_ networkKey: MeshSDK.NetworkKey) -> [MeshSDK.ApplicationKey]
  public func boundTo(_ networkKeys: [MeshSDK.NetworkKey]) -> [MeshSDK.ApplicationKey]
}
public class Provisioner : Swift.Codable {
  final public let uuid: Foundation.UUID
  public var name: Swift.String {
    get
    set
  }
  public var allocatedUnicastRange: [MeshSDK.AddressRange] {
    get
  }
  public var allocatedGroupRange: [MeshSDK.AddressRange] {
    get
  }
  public var allocatedSceneRange: [MeshSDK.SceneRange] {
    get
  }
  public init(name: Swift.String, uuid: Foundation.UUID, allocatedUnicastRange: [MeshSDK.AddressRange], allocatedGroupRange: [MeshSDK.AddressRange], allocatedSceneRange: [MeshSDK.SceneRange])
  convenience public init(name: Swift.String, allocatedUnicastRange: [MeshSDK.AddressRange], allocatedGroupRange: [MeshSDK.AddressRange], allocatedSceneRange: [MeshSDK.SceneRange])
  convenience public init(name: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension MeshSDK.Provisioner : Swift.Equatable {
  public static func == (lhs: MeshSDK.Provisioner, rhs: MeshSDK.Provisioner) -> Swift.Bool
  public static func != (lhs: MeshSDK.Provisioner, rhs: MeshSDK.Provisioner) -> Swift.Bool
}
public protocol SensorMessage : MeshSDK.StaticMeshMessage {
}
public protocol AcknowledgedSensorMessage : MeshSDK.SensorMessage, MeshSDK.StaticAcknowledgedMeshMessage {
}
extension Swift.Array where Element == any MeshSDK.SensorMessage.Type {
  public func toMap() -> [Swift.UInt32 : any MeshSDK.MeshMessage.Type]
}
public protocol SensorPropertyMessage : MeshSDK.SensorMessage {
  var property: MeshSDK.DeviceProperty { get }
}
public protocol AcknowledgedSensorPropertyMessage : MeshSDK.SensorPropertyMessage, MeshSDK.StaticAcknowledgedMeshMessage {
}
public struct SensorDescriptor {
  public let property: MeshSDK.DeviceProperty
  public let positiveTolerance: Swift.UInt16
  public let negativeTolerance: Swift.UInt16
  public let samplingFunction: MeshSDK.SensorSamplingFunction
  public var isPositiveToleranceSpecified: Swift.Bool {
    get
  }
  public var isNegativeToleranceSpecified: Swift.Bool {
    get
  }
  public var measurementPeriod: Foundation.TimeInterval? {
    get
  }
  public var updateInteval: Foundation.TimeInterval? {
    get
  }
  public init(_ property: MeshSDK.DeviceProperty, positiveTolerance: Swift.UInt16, negativeTolerance: Swift.UInt16, samplingFunction: MeshSDK.SensorSamplingFunction, measurementPeriod: Swift.UInt8, updateInterval: Swift.UInt8)
}
public enum SensorSamplingFunction : Swift.UInt8 {
  case unspecified
  case instantaneous
  case arithmeticMean
  case rms
  case maximum
  case minimum
  case accumulated
  case count
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct SensorCadence {
  public enum StatusTriggerDelta {
    case values(down: MeshSDK.DevicePropertyCharacteristic, up: MeshSDK.DevicePropertyCharacteristic)
    case percentage(down: Swift.UInt16, up: Swift.UInt16)
  }
  public let fastCadencePeriodDivisor: Swift.UInt8
  public let statusTriggerDelta: MeshSDK.SensorCadence.StatusTriggerDelta
  public let statusMinIntervalValue: Swift.UInt8
  public let fastCadenceLow: MeshSDK.DevicePropertyCharacteristic
  public let fastCadenceHigh: MeshSDK.DevicePropertyCharacteristic
  public var statusMinInterval: Foundation.TimeInterval {
    get
  }
  public init(increasePublishingFrequencyWithPeriodDivider divider: Swift.UInt8, whenValueIsAbove low: MeshSDK.DevicePropertyCharacteristic, andBelow high: MeshSDK.DevicePropertyCharacteristic, orChangesDownByMoreThan deltaDown: MeshSDK.DevicePropertyCharacteristic, orUpBy deltaUp: MeshSDK.DevicePropertyCharacteristic, withMinIntervalExponent minInterval: Swift.UInt8)
  public init(increasePublishingFrequencyWithPeriodDivider divider: Swift.UInt8, whenValueIsAbove low: MeshSDK.DevicePropertyCharacteristic, andBelow high: MeshSDK.DevicePropertyCharacteristic, orChangesDownByMoreThan deltaDown: Swift.UInt16, millipercentOrUpBy deltaUp: Swift.UInt16, millipercentWithMinIntervalExponent minInterval: Swift.UInt8)
}
extension MeshSDK.SensorSamplingFunction : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.Provisioner {
  public var unicastAddress: MeshSDK.Address? {
    get
  }
  public var node: MeshSDK.Node? {
    get
  }
  public var hasConfigurationCapabilities: Swift.Bool {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
}
public typealias Address = Swift.UInt16
extension Swift.UInt16 {
  public static let unassignedAddress: MeshSDK.Address
  public static let minUnicastAddress: MeshSDK.Address
  public static let mx_minUnicastAddress: MeshSDK.Address
  public static let maxUnicastAddress: MeshSDK.Address
  public static let minVirtualAddress: MeshSDK.Address
  public static let maxVirtualAddress: MeshSDK.Address
  public static let minGroupAddress: MeshSDK.Address
  public static let maxGroupAddress: MeshSDK.Address
  public static let allProxies: MeshSDK.Address
  public static let allFriends: MeshSDK.Address
  public static let allRelays: MeshSDK.Address
  public static let allNodes: MeshSDK.Address
}
extension Swift.UInt16 {
  public var isValidAddress: Swift.Bool {
    get
  }
  public var isUnassigned: Swift.Bool {
    get
  }
  public var isUnicast: Swift.Bool {
    get
  }
  public var isVirtual: Swift.Bool {
    get
  }
  public var isGroup: Swift.Bool {
    get
  }
  public var isSpecialGroup: Swift.Bool {
    get
  }
}
public struct ConfigLowPowerNodePollTimeoutStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let lpnAddress: MeshSDK.Address
  public let pollTimeout: Swift.UInt32
  public var pollTimeoutInterval: Foundation.TimeInterval? {
    get
  }
  public init?(of address: MeshSDK.Address, pollTimeout: Swift.UInt32)
  public init(responseTo request: MeshSDK.ConfigLowPowerNodePollTimeoutGet)
  public init?(parameters: Foundation.Data)
}
public struct FilterStatus : MeshSDK.StaticProxyConfigurationMessage {
  public static let opCode: Swift.UInt8
  public var parameters: Foundation.Data? {
    get
  }
  public let filterType: MeshSDK.ProxyFilerType
  public let listSize: Swift.UInt16
  public init(_ type: MeshSDK.ProxyFilerType, listSize: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessRangeStatus : MeshSDK.GenericMessage, MeshSDK.GenericStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.GenericMessageStatus
  public let min: Swift.UInt16
  public let max: Swift.UInt16
  public var range: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(report range: Swift.ClosedRange<Swift.UInt16>)
  public init(_ status: MeshSDK.GenericMessageStatus, for request: MeshSDK.LightLightnessRangeSet)
  public init(_ status: MeshSDK.GenericMessageStatus, for request: MeshSDK.LightLightnessRangeSetUnacknowledged)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessRangeSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let min: Swift.UInt16
  public let max: Swift.UInt16
  public var range: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(_ range: Swift.ClosedRange<Swift.UInt16>)
  public init?(parameters: Foundation.Data)
}
public struct ConfigBeaconStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let isEnabled: Swift.Bool
  public init(enabled: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
@objc open class MXPBGattBearer : ObjectiveC.NSObject, MeshSDK.MXProvisioningBearer, CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate {
  public var mac: Swift.String?
  weak public var delegate: (any MeshSDK.BearerDelegate)?
  weak public var dataDelegate: (any MeshSDK.BearerDataDelegate)?
  weak public var logger: (any MeshSDK.LoggerDelegate)?
  public var supportedPduTypes: MeshSDK.PduTypes {
    get
  }
  public var isOpen: Swift.Bool {
    get
  }
  final public let identifier: Foundation.UUID
  public var name: Swift.String? {
    get
  }
  public var peripheral: CoreBluetooth.CBPeripheral? {
    get
  }
  convenience public init(target peripheral: CoreBluetooth.CBPeripheral)
  public init(targetWithIdentifier uuid: Foundation.UUID)
  open func open()
  open func close()
  open func switchToProxyBearer() -> Swift.Bool
  open func send(_ data: Foundation.Data, ofType type: MeshSDK.PduType) throws
  open func readRSSI()
  @objc open func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didModifyServices invalidatedServices: [CoreBluetooth.CBService])
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didReadRSSI RSSI: Foundation.NSNumber, error: (any Swift.Error)?)
  @objc open func peripheralIsReady(toSendWriteWithoutResponse peripheral: CoreBluetooth.CBPeripheral)
  @objc deinit
}
public enum BearerError : Swift.Error {
  case centralManagerNotPoweredOn
  case pduTypeNotSupported
  case bearerClosed
  public static func == (a: MeshSDK.BearerError, b: MeshSDK.BearerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.BearerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct ConfigBeaconGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct GenericDeltaSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var continueTransaction: Swift.Bool
  public var parameters: Foundation.Data? {
    get
  }
  public let delta: Swift.Int32
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(delta: Swift.Int32)
  public init(delta: Swift.Int32, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigNetKeyGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public protocol BearerDataDelegate : AnyObject {
  func bearer(_ bearer: any MeshSDK.Bearer, didDeliverData data: Foundation.Data, ofType type: MeshSDK.PduType)
}
public protocol BearerDelegate : AnyObject {
  func bearerDidOpen(_ bearer: any MeshSDK.Bearer)
  func bearer(_ bearer: any MeshSDK.Bearer, didClose error: (any Swift.Error)?)
}
public struct ConfigDefaultTtlGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class Node : Swift.Codable {
  @_hasMissingDesignatedInitializers public class NodeKey : Swift.Codable {
    public var index: MeshSDK.KeyIndex {
      get
    }
    public var updated: Swift.Bool {
      get
    }
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  public struct NetworkTransmit : Swift.Codable {
    public let count: Swift.UInt8
    public let interval: Swift.UInt16
    public var steps: Swift.UInt8 {
      get
    }
    public var timeInterval: Foundation.TimeInterval {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RelayRetransmit : Swift.Codable {
    public let count: Swift.UInt8
    public let interval: Swift.UInt16
    public var steps: Swift.UInt8 {
      get
    }
    public var timeInterval: Foundation.TimeInterval {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  final public let uuid: Foundation.UUID
  public var unicastAddress: MeshSDK.Address {
    get
  }
  final public let deviceKey: Foundation.Data?
  final public let security: MeshSDK.Security
  public var isConfigComplete: Swift.Bool {
    get
    set
  }
  public var name: Swift.String? {
    get
    set
  }
  public var companyIdentifier: Swift.UInt16? {
    get
  }
  public var productIdentifier: Swift.UInt16? {
    get
  }
  public var versionIdentifier: Swift.UInt16? {
    get
  }
  public var minimumNumberOfReplayProtectionList: Swift.UInt16? {
    get
  }
  public var features: MeshSDK.NodeFeaturesState? {
    get
  }
  public var secureNetworkBeacon: Swift.Bool? {
    get
  }
  public var defaultTTL: Swift.UInt8? {
    get
    set
  }
  public var networkTransmit: MeshSDK.Node.NetworkTransmit? {
    get
  }
  public var relayRetransmit: MeshSDK.Node.RelayRetransmit? {
    get
  }
  public var elements: [MeshSDK.Element]
  public var isExcluded: Swift.Bool {
    get
    set
  }
  public var networkKeys: [MeshSDK.NetworkKey] {
    get
  }
  public var applicationKeys: [MeshSDK.ApplicationKey] {
    get
  }
  public var heartbeatPublication: MeshSDK.HeartbeatPublication? {
    get
  }
  public var heartbeatSubscription: MeshSDK.HeartbeatSubscription? {
    get
  }
  public init?(insecureNode name: Swift.String?, with n: Swift.UInt8, elementsDeviceKey deviceKey: Foundation.Data, andAssignedNetworkKey networkKey: MeshSDK.NetworkKey, andAddress address: MeshSDK.Address)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension MeshSDK.Node {
  public func add(element: MeshSDK.Element)
  public func add(elements: [MeshSDK.Element])
  public func set(elements: [MeshSDK.Element])
  public func add(networkKey: MeshSDK.NetworkKey)
  public func add(networkKeyWithIndex networkKeyIndex: MeshSDK.KeyIndex)
  public func set(networkKeys: [MeshSDK.NetworkKey])
  public func set(networkKeysWithIndexes networkKeyIndexes: [MeshSDK.KeyIndex])
  public func update(networkKeyWithIndex networkKeyIndex: MeshSDK.KeyIndex)
  public func add(applicationKey: MeshSDK.ApplicationKey)
  public func add(applicationKeyWithIndex applicationKeyIndex: MeshSDK.KeyIndex)
  public func set(applicationKeys: [MeshSDK.ApplicationKey])
  public func set(applicationKeysWithIndexes applicationKeyIndexes: [MeshSDK.KeyIndex])
  public func set(applicationKeysWithIndexes applicationKeyIndexes: [MeshSDK.KeyIndex], forNetworkKeyWithIndex networkKeyIndex: MeshSDK.KeyIndex)
  public func update(applicationKeyWithIndex applicationKeyIndex: MeshSDK.KeyIndex)
  public func remove(networkKeyWithIndex networkKeyIndex: MeshSDK.KeyIndex)
  public func remove(applicationKeyWithIndex applicationKeyIndex: MeshSDK.KeyIndex)
  public func apply(compositionData: MeshSDK.ConfigCompositionDataStatus)
  public var ensureFeatures: MeshSDK.NodeFeaturesState {
    get
  }
}
extension MeshSDK.Node.NodeKey : Swift.Comparable {
  public static func < (lhs: MeshSDK.Node.NodeKey, rhs: MeshSDK.Node.NodeKey) -> Swift.Bool
  public static func == (lhs: MeshSDK.Node.NodeKey, rhs: MeshSDK.Node.NodeKey) -> Swift.Bool
  public static func != (lhs: MeshSDK.Node.NodeKey, rhs: MeshSDK.Node.NodeKey) -> Swift.Bool
}
extension MeshSDK.Node.NodeKey : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.Node : Swift.Equatable {
  public static func == (lhs: MeshSDK.Node, rhs: MeshSDK.Node) -> Swift.Bool
}
public protocol MeshService {
  static var uuid: CoreBluetooth.CBUUID { get }
  static var dataInUuid: CoreBluetooth.CBUUID { get }
  static var dataOutUuid: CoreBluetooth.CBUUID { get }
  static func matches(_ service: CoreBluetooth.CBService) -> Swift.Bool
}
public struct MeshProvisioningService : MeshSDK.MeshService {
  public static var uuid: CoreBluetooth.CBUUID
  public static var dataInUuid: CoreBluetooth.CBUUID
  public static var dataOutUuid: CoreBluetooth.CBUUID
  public static func matches(_ service: CoreBluetooth.CBService) -> Swift.Bool
}
public struct MeshProxyService : MeshSDK.MeshService {
  public static var uuid: CoreBluetooth.CBUUID
  public static var dataInUuid: CoreBluetooth.CBUUID
  public static var dataOutUuid: CoreBluetooth.CBUUID
  public static func matches(_ service: CoreBluetooth.CBService) -> Swift.Bool
}
extension CoreBluetooth.CBService {
  public var isMeshProvisioningService: Swift.Bool {
    get
  }
  public var isMeshProxyService: Swift.Bool {
    get
  }
}
extension CoreBluetooth.CBCharacteristic {
  public var isMeshProvisioningDataInCharacteristic: Swift.Bool {
    get
  }
  public var isMeshProvisioningDataOutCharacteristic: Swift.Bool {
    get
  }
  public var isMeshProxyDataInCharacteristic: Swift.Bool {
    get
  }
  public var isMeshProxyDataOutCharacteristic: Swift.Bool {
    get
  }
}
open class BaseGattProxyBearer<Service> : ObjectiveC.NSObject, MeshSDK.Bearer, CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate where Service : MeshSDK.MeshService {
  weak public var delegate: (any MeshSDK.BearerDelegate)?
  weak public var dataDelegate: (any MeshSDK.BearerDataDelegate)?
  weak public var logger: (any MeshSDK.LoggerDelegate)?
  public var mac: Swift.String?
  public var supportedPduTypes: MeshSDK.PduTypes {
    get
  }
  public var isOpen: Swift.Bool {
    get
  }
  final public let identifier: Foundation.UUID
  public var name: Swift.String? {
    get
  }
  public var peripheral: CoreBluetooth.CBPeripheral? {
    get
  }
  convenience public init(target peripheral: CoreBluetooth.CBPeripheral)
  public init(targetWithIdentifier uuid: Foundation.UUID)
  @objc deinit
  open func open()
  open func close()
  open func send(_ data: Foundation.Data, ofType type: MeshSDK.PduType) throws
  open func readRSSI()
  @objc open func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didModifyServices invalidatedServices: [CoreBluetooth.CBService])
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didReadRSSI RSSI: Foundation.NSNumber, error: (any Swift.Error)?)
  @objc open func peripheralIsReady(toSendWriteWithoutResponse peripheral: CoreBluetooth.CBPeripheral)
}
extension CoreBluetooth.CBManagerState : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigVendorModelAppList : MeshSDK.ConfigModelAppList, MeshSDK.ConfigVendorModelMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.ConfigMessageStatus
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16
  public let applicationKeyIndexes: [MeshSDK.KeyIndex]
  public init(responseTo request: MeshSDK.ConfigVendorModelAppGet, with applicationKeys: [MeshSDK.ApplicationKey])
  public init(responseTo request: MeshSDK.ConfigVendorModelAppGet, with status: MeshSDK.ConfigMessageStatus)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLHueSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public static var responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let hue: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(hue: Swift.UInt16)
  public init(hue: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigAppKeyStatus : MeshSDK.ConfigNetAndAppKeyMessage, MeshSDK.ConfigStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let applicationKeyIndex: MeshSDK.KeyIndex
  public let status: MeshSDK.ConfigMessageStatus
  public init(confirm applicationKey: MeshSDK.ApplicationKey)
  public init(responseTo request: any MeshSDK.ConfigNetAndAppKeyMessage, with status: MeshSDK.ConfigMessageStatus)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Node {
  public var scenes: [MeshSDK.Scene] {
    get
  }
}
public enum NodeFeature : Swift.String, Swift.Codable {
  case relay
  case proxy
  case friend
  case lowPower
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct NodeFeatures : Swift.OptionSet {
  public let rawValue: Swift.UInt16
  public static let relay: MeshSDK.NodeFeatures
  public static let proxy: MeshSDK.NodeFeatures
  public static let friend: MeshSDK.NodeFeatures
  public static let lowPower: MeshSDK.NodeFeatures
  public init(rawValue: Swift.UInt16)
  public typealias ArrayLiteralElement = MeshSDK.NodeFeatures
  public typealias Element = MeshSDK.NodeFeatures
  public typealias RawValue = Swift.UInt16
}
public enum NodeFeatureState : Swift.UInt8, Swift.Codable {
  case notEnabled
  case enabled
  case notSupported
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers public class NodeFeaturesState : Swift.Codable {
  public var relay: MeshSDK.NodeFeatureState? {
    get
  }
  public var proxy: MeshSDK.NodeFeatureState? {
    get
  }
  public var friend: MeshSDK.NodeFeatureState? {
    get
  }
  public var lowPower: MeshSDK.NodeFeatureState? {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension MeshSDK.NodeFeature : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.NodeFeatures : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.NodeFeatureState : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.NodeFeaturesState : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct LightHSLDefaultGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigGATTProxyStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.NodeFeatureState
  public init(_ state: MeshSDK.NodeFeatureState)
  public init(for node: MeshSDK.Node)
  public init?(parameters: Foundation.Data)
}
public struct LightLCModeGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigModelSubscriptionDelete : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAddressMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let address: MeshSDK.Address
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(group: MeshSDK.Group, from model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLDefaultStatus : MeshSDK.GenericMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let hue: Swift.UInt16
  public let saturation: Swift.UInt16
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public enum MeshNetworkError : Swift.Error {
  case overlappingProvisionerRanges
  case provisionerUsedInAnotherNetwork
  case nodeAlreadyExist
  case noAddressAvailable
  case addressNotAvailable
  case invalidAddress
  case addressNotInAllocatedRange
  case provisionerNotInNetwork
  case cannotRemove
  case invalidRange
  case invalidKey
  case keyInUse
  case groupAlreadyExists
  case sceneAlreadyExists
  case groupInUse
  case sceneInUse
  case keyIndexOutOfRange
  case noNetworkKey
  case noApplicationKey
  case noNetwork
  case ivIndexTooSmall
  public static func == (a: MeshSDK.MeshNetworkError, b: MeshSDK.MeshNetworkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.MeshNetworkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol ProvisioningDelegate : AnyObject {
  func authenticationActionRequired(_ action: MeshSDK.AuthAction)
  func inputComplete()
  func provisioningState(of unprovisionedDevice: MeshSDK.UnprovisionedDevice, didChangeTo state: MeshSDK.ProvisioningState)
}
public class ProvisioningManager {
  public var provisioningCapabilities: MeshSDK.ProvisioningCapabilities? {
    get
  }
  public var unicastAddress: MeshSDK.Address?
  public var suggestedUnicastAddress: MeshSDK.Address? {
    get
  }
  public var networkKey: MeshSDK.NetworkKey?
  weak public var delegate: (any MeshSDK.ProvisioningDelegate)?
  weak public var logger: (any MeshSDK.LoggerDelegate)?
  public var state: MeshSDK.ProvisioningState {
    get
  }
  public var isUnicastAddressValid: Swift.Bool? {
    get
  }
  public var isDeviceSupported: Swift.Bool? {
    get
  }
  public init(for unprovisionedDevice: MeshSDK.UnprovisionedDevice, over bearer: any MeshSDK.ProvisioningBearer, in meshNetwork: MeshSDK.MeshNetwork)
  public func identify(andAttractFor attentionTimer: Swift.UInt8) throws
  public func provision(usingAlgorithm algorithm: MeshSDK.Algorithm, publicKey: MeshSDK.PublicKey, authenticationMethod: MeshSDK.AuthenticationMethod) throws
  public func removeBearer()
  public typealias StaticOOBProvisionConfirmationCallback = (_ provisionerRandom: Foundation.Data, _ deviceConfirmation: Foundation.Data, _ deviceRandom: Foundation.Data) -> ()
  public func updateProvisionerRandom(random: Foundation.Data)
  public func setOOBCheckCallBack(callback: @escaping MeshSDK.ProvisioningManager.StaticOOBProvisionConfirmationCallback)
  public func getConfirmationKey() -> Swift.String
  public func sendProvisionerConfirmation(confirmation: Foundation.Data)
  public func checkStaticOOBInfoSuccess()
  @objc deinit
}
extension MeshSDK.ProvisioningManager : MeshSDK.BearerDelegate, MeshSDK.BearerDataDelegate {
  public func bearerDidOpen(_ bearer: any MeshSDK.Bearer)
  public func bearer(_ bearer: any MeshSDK.Bearer, didClose error: (any Swift.Error)?)
  public func bearer(_ bearer: any MeshSDK.Bearer, didDeliverData data: Foundation.Data, ofType type: MeshSDK.PduType)
}
public struct ConfigBeaconSet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let state: Swift.Bool
  public init(enable: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTemperatureRangeSet : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let min: Swift.UInt16
  public let max: Swift.UInt16
  public var range: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(_ range: Swift.ClosedRange<Swift.UInt16>)
  public init?(parameters: Foundation.Data)
}
public struct SceneStoreUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let scene: MeshSDK.SceneNumber
  public init(_ scene: MeshSDK.SceneNumber)
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerDefaultSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let power: Swift.UInt16
  public init(power: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public struct GenericOnPowerUpSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.OnPowerUp
  public init(state: MeshSDK.OnPowerUp)
  public init?(parameters: Foundation.Data)
}
public enum StepResolution : Swift.UInt8 {
  case hundredsOfMilliseconds
  case seconds
  case tensOfSeconds
  case tensOfMinutes
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension MeshSDK.StepResolution : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigNetworkTransmitSet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let count: Swift.UInt8
  public let steps: Swift.UInt8
  public var interval: Foundation.TimeInterval {
    get
  }
  public init(count: Swift.UInt8, steps: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigVendorModelAppGet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigVendorModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16
  public init?(of model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public protocol VendorMessage : MeshSDK.MeshMessage {
}
public protocol AcknowledgedVendorMessage : MeshSDK.AcknowledgedMeshMessage, MeshSDK.VendorMessage {
}
public protocol StaticVendorMessage : MeshSDK.StaticMeshMessage, MeshSDK.VendorMessage {
}
public protocol AcknowledgedStaticVendorMessage : MeshSDK.StaticAcknowledgedMeshMessage, MeshSDK.StaticVendorMessage {
}
public protocol VendorStatusMessage : MeshSDK.StatusMessage {
}
extension MeshSDK.VendorMessage {
  public var opCode: Swift.UInt8 {
    get
  }
  public var companyIdentifier: Swift.UInt16 {
    get
  }
}
extension Swift.Array where Element == any MeshSDK.StaticVendorMessage.Type {
  public func toMap() -> [Swift.UInt32 : any MeshSDK.MeshMessage.Type]
}
@_hasMissingDesignatedInitializers public class MeshData : Swift.Codable {
  public var meshNetwork: MeshSDK.MeshNetwork? {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct SensorSettingsStatus : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public let property: MeshSDK.DeviceProperty
  public let settingsProperties: [MeshSDK.DeviceProperty]?
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, settingsProperties: [MeshSDK.DeviceProperty]?)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Node {
  public var primaryElement: MeshSDK.Element? {
    get
  }
  public func element(withAddress address: MeshSDK.Address) -> MeshSDK.Element?
}
public struct ConfigDefaultTtlStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let ttl: Swift.UInt8
  public init(ttl: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func getAllNetworkKey() -> [Swift.String]
  @objc dynamic public func isNetworkKeyExists(networkKey: Swift.String) -> Swift.Bool
  @objc dynamic public func createNetworkKey(key: Swift.String, appKey: Swift.String?) -> Swift.Bool
  @objc dynamic public func createNetworkKey(key: Swift.String) -> Swift.Bool
  @objc dynamic public func deleteNetworkKey(key: Swift.String)
  @objc dynamic public func setCurrentNetworkKey(key: Swift.String)
  @objc dynamic public func getCurrentNetworkKey() -> Swift.String
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func getAllApplicationKey(networkKey: Swift.String) -> [Swift.String]
}
public struct ConfigNetworkTransmitStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let count: Swift.UInt8
  public let steps: Swift.UInt8
  public var interval: Foundation.TimeInterval {
    get
  }
  public init(count: Swift.UInt8, steps: Swift.UInt8)
  public init(for node: MeshSDK.Node)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessLinearGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerLevelGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct SensorColumnGet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public let rawValueX: Foundation.Data
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, rawValueX: Foundation.Data)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshNetwork {
  public func group(withAddress address: MeshSDK.MeshAddress) -> MeshSDK.Group?
  public func group(withAddress address: MeshSDK.Address) -> MeshSDK.Group?
  public func add(group: MeshSDK.Group) throws
  public func remove(group: MeshSDK.Group) throws
  public func models(subscribedTo group: MeshSDK.Group) -> [MeshSDK.Model]
}
public struct ProvisioningCapabilities {
  public let numberOfElements: Swift.UInt8
  public let algorithms: MeshSDK.Algorithms
  public let publicKeyType: MeshSDK.PublicKeyType
  public let staticOobType: MeshSDK.StaticOobType
  public let outputOobSize: Swift.UInt8
  public let outputOobActions: MeshSDK.OutputOobActions
  public let inputOobSize: Swift.UInt8
  public let inputOobActions: MeshSDK.InputOobActions
}
extension MeshSDK.ProvisioningCapabilities : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigSIGModelAppList : MeshSDK.ConfigModelAppList {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.ConfigMessageStatus
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let applicationKeyIndexes: [MeshSDK.KeyIndex]
  public init(responseTo request: MeshSDK.ConfigSIGModelAppGet, with applicationKeys: [MeshSDK.ApplicationKey])
  public init(responseTo request: MeshSDK.ConfigSIGModelAppGet, with status: MeshSDK.ConfigMessageStatus)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshNetwork {
  public func restoreIvIndex()
  public func setIvIndex(_ index: Swift.UInt32, updateActive: Swift.Bool) throws
}
public struct ConfigNetKeyAdd : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let key: Foundation.Data
  public init(networkKey: MeshSDK.NetworkKey)
  public init?(parameters: Foundation.Data)
}
@objc public protocol MXMeshDelegate {
  @objc optional func meshConnectChange(status: Swift.Int)
  @objc optional func provisionerSequenceUpdate(seq: Swift.Int)
  @objc optional func meshNetworkIvIndexUpdate(index: Swift.Int)
  @objc optional func deviceStatusUpdate(uuid: Swift.String, status: Swift.Int)
  @objc optional func deviceCacheInvalid(uuid: Swift.String)
  @objc optional func receiveMeshMessage(uuid: Swift.String, elementIndex: Swift.Int, message: Swift.String)
}
@objc public protocol MXMeshProvisioningDelegate {
  @objc optional func inputExchangeInformation(uuid: Swift.String?, confirmationKey: Swift.String, handler: @escaping ((_ uuid: Swift.String?, _ provisionerRandom: Swift.String?, _ provisionerConfirmation: Swift.String?, _ authValueKey: Swift.String?) -> Swift.Void))
  @objc optional func checkStaticOOBDeviceInfo(uuid: Swift.String?, provisionerRandom: Swift.String, deviceConfirmation: Swift.String, deviceRandom: Swift.String, handler: @escaping ((_ uuid: Swift.String?, _ isSuccess: Swift.Bool) -> Swift.Void))
  @objc optional func inputPublicKey(uuid: Swift.String?, handler: @escaping ((Swift.String) -> Swift.Void))
  @objc optional func inputUnicastAddress(uuid: Swift.String?, elementNum: Swift.Int, handler: @escaping ((_ uuid: Swift.String?, _ address: Swift.Int) -> Swift.Void))
  @objc optional func meshProvisionProcess(uuid: Swift.String?, step: Swift.Int)
  @objc optional func meshProvisionFinish(uuid: Swift.String?, error: Foundation.NSError?)
}
public struct LightLCLightOnOffSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let isOn: Swift.Bool
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(_ isOn: Swift.Bool)
  public init(_ isOn: Swift.Bool, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct SensorSeriesStatus : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public let property: MeshSDK.DeviceProperty
  public let seriesRawData: Foundation.Data?
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, seriesRawData: Foundation.Data?)
  public init?(parameters: Foundation.Data)
}
public struct MeshAddress {
  public let address: MeshSDK.Address
  public let virtualLabel: Foundation.UUID?
  public init?(hex: Swift.String)
  public init(_ address: MeshSDK.Address)
  public init(_ virtualLabel: Foundation.UUID)
}
extension MeshSDK.MeshAddress : Swift.Equatable {
  public static func == (lhs: MeshSDK.MeshAddress, rhs: MeshSDK.MeshAddress) -> Swift.Bool
  public static func != (lhs: MeshSDK.MeshAddress, rhs: MeshSDK.MeshAddress) -> Swift.Bool
}
extension MeshSDK.MeshAddress : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.MeshAddress : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct GenericOnOffSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let isOn: Swift.Bool
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(_ isOn: Swift.Bool)
  public init(_ isOn: Swift.Bool, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public typealias MeshElement = MeshSDK.Element
@_hasMissingDesignatedInitializers public class Element : Swift.Codable {
  public var name: Swift.String?
  public var index: Swift.UInt8 {
    get
  }
  public var location: MeshSDK.Location {
    get
  }
  public var models: [MeshSDK.Model]
  weak public var parentNode: MeshSDK.Node? {
    get
  }
  public init(name: Swift.String? = nil, location: MeshSDK.Location = .unknown, models: [MeshSDK.Model])
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension MeshSDK.Element : Swift.Equatable {
  public static func == (lhs: MeshSDK.Element, rhs: MeshSDK.Element) -> Swift.Bool
  public static func != (lhs: MeshSDK.Element, rhs: MeshSDK.Element) -> Swift.Bool
}
extension MeshSDK.Element : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.Node {
  public var elementsCount: Swift.UInt8 {
    get
  }
  public var lastUnicastAddress: MeshSDK.Address {
    get
  }
  public func hasAllocatedAddress(_ address: MeshSDK.Address) -> Swift.Bool
  public func overlapsWithAddress(_ address: MeshSDK.Address, elementsCount count: Swift.UInt8) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class Crypto {
  @objc deinit
}
extension MeshSDK.Crypto {
  public static func calculateSalt(_ data: Foundation.Data) -> Foundation.Data
  public static func calculateCMAC(_ data: Foundation.Data, andKey key: Foundation.Data) -> Foundation.Data
  public static func calculateECB(_ data: Foundation.Data, andKey key: Foundation.Data) -> Foundation.Data
  public static func calculateCCM(_ data: Foundation.Data, withKey key: Foundation.Data, nonce: Foundation.Data, andMICSize size: Swift.UInt8, withAdditionalData aad: Foundation.Data?) -> Foundation.Data
  public static func calculateDecryptedCCM(_ data: Foundation.Data, withKey key: Foundation.Data, nonce: Foundation.Data, andMIC mic: Foundation.Data, withAdditionalData aad: Foundation.Data?) -> Foundation.Data?
  public static func calculateK1(withN N: Foundation.Data, salt: Foundation.Data, andP P: Foundation.Data) -> Foundation.Data
  public static func calculateK2(withN N: Foundation.Data, andP P: Foundation.Data) -> (nid: Swift.UInt8, encryptionKey: Foundation.Data, privacyKey: Foundation.Data)
  public static func calculateK3(withN N: Foundation.Data) -> Foundation.Data
  public static func calculateK4(withN N: Foundation.Data) -> Swift.UInt8
}
public protocol MeshNetworkDelegate : AnyObject {
  func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, didReceiveMessage message: any MeshSDK.MeshMessage, sentFrom source: MeshSDK.Address, to destination: MeshSDK.Address)
  func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, didSendMessage message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element, to destination: MeshSDK.Address)
  func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, failedToSendMessage message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element, to destination: MeshSDK.Address, error: any Swift.Error)
  func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, ivIndexDidUpdate index: Swift.UInt32)
}
extension MeshSDK.MeshNetworkDelegate {
  public func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, didSendMessage message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element, to destination: MeshSDK.Address)
  public func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, failedToSendMessage message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element, to destination: MeshSDK.Address, error: any Swift.Error)
}
extension MeshSDK.Group {
  public var isUsed: Swift.Bool {
    get
  }
  public func isDirectChildOf(_ parent: MeshSDK.Group) -> Swift.Bool
  public func isDirectParentOf(_ child: MeshSDK.Group) -> Swift.Bool
  public func isChildOf(_ parent: MeshSDK.Group) -> Swift.Bool
  public func isParentOf(_ child: MeshSDK.Group) -> Swift.Bool
  public func setAsChildOf(_ parent: MeshSDK.Group)
  public func setAsParentOf(_ child: MeshSDK.Group)
}
@_inheritsConvenienceInitializers open class GattBearer : MeshSDK.BaseGattProxyBearer<MeshSDK.MeshProxyService>, MeshSDK.MeshBearer {
  override public var supportedPduTypes: MeshSDK.PduTypes {
    get
  }
  override public init(targetWithIdentifier uuid: Foundation.UUID)
  @objc deinit
}
extension Swift.Dictionary where Key == Swift.String, Value == Any {
  public var localName: Swift.String? {
    get
  }
  public var unprovisionedDeviceUUID: CoreBluetooth.CBUUID? {
    get
  }
  public var oobInformation: MeshSDK.OobInformation? {
    get
  }
  public var networkId: Foundation.Data? {
    get
  }
  public var nodeIdentity: (hash: Foundation.Data, random: Foundation.Data)? {
    get
  }
}
@_inheritsConvenienceInitializers public class SceneRange : MeshSDK.RangeObject, Swift.Codable {
  public var firstScene: MeshSDK.SceneNumber {
    get
  }
  public var lastScene: MeshSDK.SceneNumber {
    get
  }
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from lowerBound: Swift.UInt16, to upperBound: Swift.UInt16)
  required public init(_ range: Swift.ClosedRange<Swift.UInt16>)
  @objc deinit
}
public struct GenericLevelSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let level: Swift.Int16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(level: Swift.Int16)
  public init(level: Swift.Int16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLRangeStatus : MeshSDK.GenericMessage, MeshSDK.GenericStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.GenericMessageStatus
  public let minHue: Swift.UInt16
  public let maxHue: Swift.UInt16
  public let minSaturation: Swift.UInt16
  public let maxSaturation: Swift.UInt16
  public var hueRange: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public var saturationRange: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(report hueRange: Swift.ClosedRange<Swift.UInt16>, _ saturationRange: Swift.ClosedRange<Swift.UInt16>)
  public init(_ status: MeshSDK.GenericMessageStatus, for request: MeshSDK.LightHSLRangeSet)
  public init(_ status: MeshSDK.GenericMessageStatus, for request: MeshSDK.LightHSLRangeSetUnacknowledged)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigAppKeyGet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public init(networkKey: MeshSDK.NetworkKey)
  public init?(parameters: Foundation.Data)
}
public protocol GenericMessage : MeshSDK.StaticMeshMessage {
}
public protocol AcknowledgedGenericMessage : MeshSDK.GenericMessage, MeshSDK.StaticAcknowledgedMeshMessage {
}
extension Swift.Array where Element == any MeshSDK.GenericMessage.Type {
  public func toMap() -> [Swift.UInt32 : any MeshSDK.MeshMessage.Type]
}
public enum GenericMessageStatus : Swift.UInt8 {
  case success
  case cannotSetRangeMin
  case cannotSetRangeMax
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol GenericStatusMessage : MeshSDK.GenericMessage, MeshSDK.StatusMessage {
  var status: MeshSDK.GenericMessageStatus { get }
}
extension MeshSDK.GenericStatusMessage {
  public var isSuccess: Swift.Bool {
    get
  }
  public var message: Swift.String {
    get
  }
}
extension MeshSDK.GenericMessageStatus : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum SceneMessageStatus : Swift.UInt8 {
  case success
  case sceneRegisterFull
  case sceneNotFound
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol SceneStatusMessage : MeshSDK.GenericMessage, MeshSDK.StatusMessage {
  var status: MeshSDK.SceneMessageStatus { get }
}
extension MeshSDK.SceneStatusMessage {
  public var isSuccess: Swift.Bool {
    get
  }
  public var message: Swift.String {
    get
  }
}
extension MeshSDK.SceneMessageStatus : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigFriendGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigSIGModelAppGet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public init?(of model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLDefaultSet : MeshSDK.AcknowledgedGenericMessage {
  public static var opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let hue: Swift.UInt16
  public let saturation: Swift.UInt16
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public struct ConfigModelPublicationStatus : MeshSDK.ConfigAnyModelMessage, MeshSDK.ConfigStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public let publish: MeshSDK.Publish
  public let status: MeshSDK.ConfigMessageStatus
  public init(responseTo request: any MeshSDK.ConfigAnyModelMessage, with publish: MeshSDK.Publish?)
  public init(responseTo request: any MeshSDK.ConfigAnyModelMessage, with status: MeshSDK.ConfigMessageStatus)
  public init(confirm request: MeshSDK.ConfigModelPublicationSet)
  public init(confirm request: MeshSDK.ConfigModelPublicationVirtualAddressSet)
  public init?(parameters: Foundation.Data)
}
public enum PublicKey {
  case noOobPublicKey
  case oobPublicKey(key: Foundation.Data)
}
extension MeshSDK.PublicKey : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct PublicKeyType : Swift.OptionSet {
  public let rawValue: Swift.UInt8
  public static let publicKeyOobInformationAvailable: MeshSDK.PublicKeyType
  public init(rawValue: Swift.UInt8)
  public typealias ArrayLiteralElement = MeshSDK.PublicKeyType
  public typealias Element = MeshSDK.PublicKeyType
  public typealias RawValue = Swift.UInt8
}
extension MeshSDK.PublicKeyType : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigModelSubscriptionAdd : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAddressMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let address: MeshSDK.Address
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(group: MeshSDK.Group, to model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct GenericDefaultTransitionTimeSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let transitionTime: MeshSDK.TransitionTime
  public init(transitionTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public enum DeviceProperty {
  case averageAmbientTemperatureInAPeriodOfDay
  case averageInputCurrent
  case averageInputVoltage
  case averageOutputCurrent
  case averageOutputVoltage
  case centerBeamIntensityAtFullPower
  case chromaticityTolerance
  case colorRenderingIndexR9
  case colorRenderingIndexRa
  case deviceAppearance
  case deviceCountryOfOrigin
  case deviceDateOfManufacture
  case deviceEnergyUseSinceTurnOn
  case deviceFirmwareRevision
  case deviceGlobalTradeItemNumber
  case deviceHardwareRevision
  case deviceManufacturerName
  case deviceModelNumber
  case deviceOperatingTemperatureRangeSpecification
  case deviceOperatingTemperatureStatisticalValues
  case deviceOverTemperatureEventStatistics
  case devicePowerRangeSpecification
  case deviceRuntimeSinceTurnOn
  case deviceRuntimeWarranty
  case deviceSerialNumber
  case deviceSoftwareRevision
  case deviceUnderTemperatureEventStatistics
  case indoorAmbientTemperatureStatisticalValues
  case initialCIE1931ChromaticityCoordinates
  case initialCorrelatedColorTemperature
  case initialLuminousFlux
  case initialPlanckianDistance
  case inputCurrentRangeSpecification
  case inputCurrentStatistics
  case inputOverCurrentEventStatistics
  case inputOverRippleVoltageEventStatistics
  case inputOverVoltageEventStatistics
  case inputUnderCurrentEventStatistics
  case inputUnderVoltageEventStatistics
  case inputVoltageRangeSpecification
  case inputVoltageRippleSpecification
  case inputVoltageStatistics
  case lightControlAmbientLuxLevelOn
  case lightControlAmbientLuxLevelProlong
  case lightControlAmbientLuxLevelStandby
  case lightControlLightnessOn
  case lightControlLightnessProlong
  case lightControlLightnessStandby
  case lightControlRegulatorAccuracy
  case lightControlRegulatorKid
  case lightControlRegulatorKiu
  case lightControlRegulatorKpd
  case lightControlRegulatorKpu
  case lightControlTimeFade
  case lightControlTimeFadeOn
  case lightControlTimeFadeStandbyAuto
  case lightControlTimeFadeStandbyManual
  case lightControlTimeOccupancyDelay
  case lightControlTimeProlong
  case lightControlTimeRunOn
  case lumenMaintenanceFactor
  case luminousEfficacy
  case luminousEnergySinceTurnOn
  case luminousExposure
  case luminousFluxRange
  case motionSensed
  case motionThreshold
  case openCircuitEventStatistics
  case outdoorStatisticalValues
  case outputCurrentRange
  case outputCurrentStatistics
  case outputRippleVoltageSpecification
  case outputVoltageRange
  case outputVoltageStatistics
  case overOutputRippleVoltageEventStatistics
  case peopleCount
  case presenceDetected
  case presentAmbientLightLevel
  case presentAmbientTemperature
  case presentCIE1931ChromaticityCoordinates
  case presentCorrelatedColorTemperature
  case presentDeviceInputPower
  case presentDeviceOperatingEfficiency
  case presentDeviceOperatingTemperature
  case presentIlluminance
  case presentIndoorAmbientTemperature
  case presentInputCurrent
  case presentInputRippleVoltage
  case presentInputVoltage
  case presentLuminousFlux
  case presentOutdoorAmbientTemperature
  case presentOutputCurrent
  case presentOutputVoltage
  case presentPlanckianDistance
  case presentRelativeOutputRippleVoltage
  case relativeDeviceEnergyUseInAPeriodOfDay
  case relativeDeviceRuntimeInAGenericLevelRange
  case relativeExposureTimeInAnIlluminanceRange
  case relativeRuntimeInACorrelatedColorTemperatureRange
  case relativeRuntimeInADeviceOperatingTemperatureRange
  case relativeRuntimeInAnInputCurrentRange
  case relativeRuntimeInAnInputVoltageRange
  case shortCircuitEventStatistics
  case timeSinceMotionSensed
  case timeSincePresenceDetected
  case totalDeviceEnergyUse
  case totalDeviceOffOnCycles
  case totalDevicePowerOnCycles
  case totalDevicePowerOnTime
  case totalDeviceRuntime
  case totalLightExposureTime
  case totalLuminousEnergy
  case desiredAmbientTemperature
  case preciseTotalDeviceEnergyUse
  case powerFactor
  case sensorGain
  case precisePresentAmbientTemperature
  case presentAmbientRelativeHumidity
  case presentAmbientCarbonDioxideConcentration
  case presentAmbientVolatileOrganicCompoundsConcentration
  case presentAmbientNoise
  case activeEnergyLoadside
  case activePowerLoadside
  case airPressure
  case apparentEnergy
  case apparentPower
  case apparentWindDirection
  case apparentWindSpeed
  case dewPoint
  case externalSupplyVoltage
  case externalSupplyVoltageFrequency
  case gustFactor
  case heatIndex
  case lightDistribution
  case lightSourceCurrent
  case lightSourceOnTimeNotResettable
  case lightSourceOnTimeResettable
  case lightSourceOpenCircuitStatistics
  case lightSourceOverallFailuresStatistics
  case lightSourceShortCircuitStatistics
  case lightSourceStartCounterResettable
  case lightSourceTemperature
  case lightSourceThermalDeratingStatistics
  case lightSourceThermalShutdownStatistics
  case lightSourceTotalPowerOnCycles
  case lightSourceVoltage
  case luminaireColor
  case luminaireIdentificationNumber
  case luminaireManufacturerGTIN
  case luminaireNominalInputPower
  case luminaireNominalMaximumACMainsVoltage
  case luminaireNominalMinimumACMainsVoltage
  case luminairePowerAtMinimumDimLevel
  case luminaireTimeOfManufacture
  case magneticDeclination
  case magneticFluxDensity2D
  case magneticFluxDensity3D
  case nominalLightOutput
  case overallFailureCondition
  case pollenConcentration
  case presentIndoorRelativeHumidity
  case presentOutdoorRelativeHumidity
  case pressure
  case rainfall
  case ratedMedianUsefulLifeOfLuminaire
  case ratedMedianUsefulLightSourceStarts
  case referenceTemperature
  case totalDeviceStarts
  case trueWindDirection
  case trueWindSpeed
  case uVIndex
  case windChill
  case lightSourceType
  case luminaireIdentificationString
  case outputPowerLimitation
  case thermalDerating
  case outputCurrentPercent
  case unknown(Swift.UInt16)
  public var id: Swift.UInt16 {
    get
  }
}
extension MeshSDK.DeviceProperty : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum DevicePropertyCharacteristic : Swift.Equatable {
  case bool(Swift.Bool)
  case count16(Swift.UInt16?)
  case count24(Swift.UInt32?)
  case coefficient(Swift.Float32)
  case dateUTC(Foundation.Date?)
  case electricCurrent(Foundation.Decimal?)
  case energy32(Foundation.Decimal?)
  case fixedString8(Swift.String)
  case fixedString16(Swift.String)
  case fixedString24(Swift.String)
  case fixedString36(Swift.String)
  case fixedString64(Swift.String)
  case humidity(Foundation.Decimal?)
  case illuminance(Foundation.Decimal?)
  case percentage8(Foundation.Decimal?)
  case perceivedLightness(Swift.UInt16)
  case power(Foundation.Decimal?)
  case pressure(Foundation.Decimal)
  case temperature(Foundation.Decimal?)
  case temperature8(Foundation.Decimal?)
  case timeHour24(Swift.UInt32?)
  case timeMillisecond24(Swift.UInt32?)
  case timeSecond16(Swift.UInt16?)
  case timeSecond32(Swift.UInt32?)
  case other(Foundation.Data)
  public static func == (a: MeshSDK.DevicePropertyCharacteristic, b: MeshSDK.DevicePropertyCharacteristic) -> Swift.Bool
}
extension MeshSDK.DevicePropertyCharacteristic : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigKeyRefreshPhaseGet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public init(networkKey: MeshSDK.NetworkKey)
  public init?(parameters: Foundation.Data)
}
extension Swift.Array where Element == MeshSDK.NetworkKey {
  public subscript(networkId: Foundation.Data) -> MeshSDK.NetworkKey? {
    get
  }
  public subscript(keyIndex: MeshSDK.KeyIndex) -> MeshSDK.NetworkKey? {
    get
  }
  public var primaryKey: MeshSDK.NetworkKey? {
    get
  }
  public func knownTo(node: MeshSDK.Node) -> [MeshSDK.NetworkKey]
  public func notKnownTo(node: MeshSDK.Node) -> [MeshSDK.NetworkKey]
}
public struct GenericBatteryGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Provisioner {
  public var isValid: Swift.Bool {
    get
  }
  public func allocateUnicastAddressRange(_ range: MeshSDK.AddressRange) throws
  public func allocateUnicastAddressRanges(_ ranges: [MeshSDK.AddressRange]) throws
  public func allocateGroupAddressRange(_ range: MeshSDK.AddressRange) throws
  public func allocateGroupAddressRanges(_ ranges: [MeshSDK.AddressRange]) throws
  public func allocateSceneRange(_ range: MeshSDK.SceneRange) throws
  public func allocateSceneRanges(_ ranges: [MeshSDK.SceneRange]) throws
  public func deallocateUnicastAddressRange(_ range: MeshSDK.AddressRange)
  public func deallocateGroupAddressRange(_ range: MeshSDK.AddressRange)
  public func deallocateSceneRange(_ range: MeshSDK.SceneRange)
  public func isAddressInAllocatedRange(_ address: MeshSDK.Address, elementCount count: Swift.UInt8) -> Swift.Bool
  public func isSceneInAllocatedRange(_ scene: MeshSDK.SceneNumber) -> Swift.Bool
  public var scenes: [MeshSDK.Scene] {
    get
  }
  public func maxElementCount(for address: MeshSDK.Address) -> Swift.Int
  public func hasOverlappingRanges(with provisioner: MeshSDK.Provisioner) -> Swift.Bool
  public func hasOverlappingUnicastRanges(with provisioner: MeshSDK.Provisioner) -> Swift.Bool
  public func hasOverlappingGroupRanges(with provisioner: MeshSDK.Provisioner) -> Swift.Bool
  public func hasOverlappingSceneRanges(with provisioner: MeshSDK.Provisioner) -> Swift.Bool
}
public struct ConfigHeartbeatSubscriptionGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigNetKeyUpdate : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let key: Foundation.Data
  public init(networkKey: MeshSDK.NetworkKey)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLHueStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let hue: Swift.UInt16
  public let targetHue: Swift.UInt16?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(hue: Swift.UInt16)
  public init(hue: Swift.UInt16, targetHue: Swift.UInt16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct SceneRegisterStatus : MeshSDK.GenericMessage, MeshSDK.SceneStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.SceneMessageStatus
  public let currentScene: MeshSDK.SceneNumber
  public let scenes: [MeshSDK.SceneNumber]
  public var isSceneActive: Swift.Bool {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public init(report currentScene: MeshSDK.SceneNumber, and scenes: [MeshSDK.SceneNumber])
  public init(report currentScene: MeshSDK.SceneNumber, and scenes: [MeshSDK.SceneNumber], with status: MeshSDK.SceneMessageStatus)
  public init?(parameters: Foundation.Data)
}
public struct LightLCPropertyGet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ property: MeshSDK.DeviceProperty)
  public init?(parameters: Foundation.Data)
}
public struct MessageHandle {
  public let opCode: Swift.UInt32
  public let source: MeshSDK.Address
  public let destination: MeshSDK.Address
  public func cancel()
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func getCompositionData(uuid: Swift.String, callback: @escaping MeshSDK.MeshSDK.MXMeshProvisionCallback)
  @objc dynamic public func getTtl(uuid: Swift.String, callback: @escaping MeshSDK.MeshSDK.MXMeshProvisionCallback)
}
public struct LightLCPropertySet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public let propertyValue: MeshSDK.DevicePropertyCharacteristic
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, value: MeshSDK.DevicePropertyCharacteristic)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(lightness: Swift.UInt16)
  public init(lightness: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigKeyRefreshPhaseSet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let transition: MeshSDK.KeyRefreshPhaseTransition
  public init(networkKey: MeshSDK.NetworkKey, transition: MeshSDK.KeyRefreshPhaseTransition)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshNetwork {
  public func add(scene: MeshSDK.SceneNumber, name: Swift.String) throws
  public func remove(scene: MeshSDK.SceneNumber) throws
  public func nodes(registeredTo scene: MeshSDK.SceneNumber) -> [MeshSDK.Node]
  public func nextAvailableScene(for provisioner: MeshSDK.Provisioner) -> MeshSDK.SceneNumber?
  public func nextAvailableScene() -> MeshSDK.SceneNumber?
}
public struct AddAddressesToFilter : MeshSDK.StaticAcknowledgedProxyConfigurationMessage {
  public static let opCode: Swift.UInt8
  public static let responseType: any MeshSDK.StaticProxyConfigurationMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let addresses: Swift.Set<MeshSDK.Address>
  public init(_ addresses: Swift.Set<MeshSDK.Address>)
  public init?(parameters: Foundation.Data)
}
public enum Security : Swift.String, Swift.Codable {
  case insecure
  case secure
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension MeshSDK.Security : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct SceneDelete : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let scene: MeshSDK.SceneNumber
  public init(_ scene: MeshSDK.SceneNumber)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLDefaultSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let temperature: Swift.UInt16
  public let deltaUV: Swift.Int16
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16, deltaUV: Swift.Int16)
  public init?(parameters: Foundation.Data)
}
public struct ConfigFriendSet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.NodeFeatureState
  public init(enable: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
public struct SensorSettingSetUnacknowledged : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public let property: MeshSDK.DeviceProperty
  public let settingProperty: MeshSDK.DeviceProperty
  public let settingValue: MeshSDK.DevicePropertyCharacteristic
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ setting: MeshSDK.DeviceProperty, of property: MeshSDK.DeviceProperty, to value: MeshSDK.DevicePropertyCharacteristic)
  public init?(parameters: Foundation.Data)
}
public typealias SensorValue = (property: MeshSDK.DeviceProperty, value: MeshSDK.DevicePropertyCharacteristic)
public struct SensorStatus : MeshSDK.SensorMessage {
  public static let opCode: Swift.UInt32
  public let values: [MeshSDK.SensorValue]
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ value: MeshSDK.SensorValue)
  public init(_ values: [MeshSDK.SensorValue])
  public init?(parameters: Foundation.Data)
}
public struct GenericMoveSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let deltaLevel: Swift.Int16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(deltaLevel: Swift.Int16)
  public init(deltaLevel: Swift.Int16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class HeartbeatSubscription : Swift.Codable {
  final public let source: MeshSDK.Address
  final public let destination: MeshSDK.Address
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public struct ConfigModelAppBind : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAppKeyMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let applicationKeyIndex: MeshSDK.KeyIndex
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(applicationKey: MeshSDK.ApplicationKey, to model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class NetworkKey : MeshSDK.Key, Swift.Codable {
  public var timestamp: Foundation.Date {
    get
  }
  public var name: Swift.String
  public var index: MeshSDK.KeyIndex {
    get
  }
  public var phase: MeshSDK.KeyRefreshPhase {
    get
  }
  public var key: Foundation.Data {
    get
  }
  public var oldKey: Foundation.Data? {
    get
  }
  public var minSecurity: MeshSDK.Security {
    get
  }
  public var networkId: Foundation.Data! {
    get
  }
  public var oldNetworkId: Foundation.Data? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension MeshSDK.NetworkKey : Swift.Equatable {
  public static func == (lhs: MeshSDK.NetworkKey, rhs: MeshSDK.NetworkKey) -> Swift.Bool
  public static func != (lhs: MeshSDK.NetworkKey, rhs: MeshSDK.NetworkKey) -> Swift.Bool
}
extension MeshSDK.NetworkKey : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigHeartbeatPublicationStatus : MeshSDK.ConfigMessage, MeshSDK.ConfigStatusMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.ConfigMessageStatus
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let destination: MeshSDK.Address
  public let countLog: Swift.UInt8
  public var count: MeshSDK.RemainingHeartbeatPublicationCount {
    get
  }
  public let periodLog: Swift.UInt8
  public var period: Swift.UInt16 {
    get
  }
  public let ttl: Swift.UInt8
  public let features: MeshSDK.NodeFeatures
  public var isEnabled: Swift.Bool {
    get
  }
  public var isPeriodicPublicationEnabled: Swift.Bool {
    get
  }
  public var isFeatureTriggeredPublishingEnabled: Swift.Bool {
    get
  }
  public init(_ publication: MeshSDK.HeartbeatPublication?)
  public init(responseTo request: MeshSDK.ConfigHeartbeatPublicationSet, with status: MeshSDK.ConfigMessageStatus)
  public init(confirm request: MeshSDK.ConfigHeartbeatPublicationSet)
  public init?(parameters: Foundation.Data)
}
public struct GenericOnOffStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let isOn: Swift.Bool
  public let targetState: Swift.Bool?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(_ isOn: Swift.Bool)
  public init(_ isOn: Swift.Bool, targetState: Swift.Bool, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessDefaultStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public init(lightness: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public struct GenericLevelStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let level: Swift.Int16
  public let targetLevel: Swift.Int16?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(level: Swift.Int16)
  public init(level: Swift.Int16, targetLevel: Swift.Int16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct ConfigCompositionDataGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let page: Swift.UInt8
  public init(page: Swift.UInt8 = 0)
  public init?(parameters: Foundation.Data)
}
public protocol GattBearerDelegate : MeshSDK.BearerDelegate {
  func bearerDidConnect(_ bearer: any MeshSDK.Bearer)
  func bearerDidDiscoverServices(_ bearer: any MeshSDK.Bearer)
  func bearer(_ bearer: any MeshSDK.Bearer, didReadRSSI RSSI: Foundation.NSNumber)
  func bearerDidSwitchedToProxy(_ bearer: any MeshSDK.Bearer)
}
extension MeshSDK.GattBearerDelegate {
  public func bearerDidConnect(_ bearer: any MeshSDK.Bearer)
  public func bearerDidDiscoverServices(_ bearer: any MeshSDK.Bearer)
  public func bearer(_ bearer: any MeshSDK.Bearer, didReadRSSI RSSI: Foundation.NSNumber)
  public func bearerDidSwitchedToProxy(_ bearer: any MeshSDK.Bearer)
}
public struct GenericOnOffGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let targetLightness: Swift.UInt16?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(lightness: Swift.UInt16)
  public init(lightness: Swift.UInt16, targetLightness: Swift.UInt16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public enum Algorithm {
  case fipsP256EllipticCurve
  public static func == (a: MeshSDK.Algorithm, b: MeshSDK.Algorithm) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.Algorithm : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct Algorithms : Swift.OptionSet {
  public let rawValue: Swift.UInt16
  public static let fipsP256EllipticCurve: MeshSDK.Algorithms
  public init(rawValue: Swift.UInt16)
  public typealias ArrayLiteralElement = MeshSDK.Algorithms
  public typealias Element = MeshSDK.Algorithms
  public typealias RawValue = Swift.UInt16
}
extension MeshSDK.Algorithms : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct LightLCOccupancyModeGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigGATTProxyGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigNodeReset : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
@_inheritsConvenienceInitializers public class AddressRange : MeshSDK.RangeObject, Swift.Codable {
  public var lowAddress: MeshSDK.Address {
    get
  }
  public var highAddress: MeshSDK.Address {
    get
  }
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from lowerBound: Swift.UInt16, to upperBound: Swift.UInt16)
  required public init(_ range: Swift.ClosedRange<Swift.UInt16>)
  @objc deinit
}
public struct LightCTLSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let temperature: Swift.UInt16
  public let deltaUV: Swift.Int16
  public var transitionTime: MeshSDK.TransitionTime?
  public var delay: Swift.UInt8?
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16, deltaUV: Swift.Int16)
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16, deltaUV: Swift.Int16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigModelSubscriptionVirtualAddressAdd : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigVirtualLabelMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let virtualLabel: Foundation.UUID
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(group: MeshSDK.Group, to model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshNetwork {
  public func isRangeAvailableForAllocation(_ range: MeshSDK.AddressRange) -> Swift.Bool
  public func areRangesAvailableForAllocation(_ ranges: [MeshSDK.AddressRange]) -> Swift.Bool
  public func isRangeAvailableForAllocation(_ range: MeshSDK.SceneRange) -> Swift.Bool
  public func areRangesAvailableForAllocation(_ ranges: [MeshSDK.SceneRange]) -> Swift.Bool
  public func isRange(_ range: MeshSDK.AddressRange, availableForAllocationTo provisioner: MeshSDK.Provisioner) -> Swift.Bool
  public func areRanges(_ ranges: [MeshSDK.AddressRange], availableForAllocationTo provisioner: MeshSDK.Provisioner) -> Swift.Bool
  public func isRange(_ range: MeshSDK.SceneRange, availableForAllocationTo provisioner: MeshSDK.Provisioner) -> Swift.Bool
  public func areRanges(_ ranges: [MeshSDK.SceneRange], availableForAllocationTo provisioner: MeshSDK.Provisioner) -> Swift.Bool
  public func nextAvailableUnicastAddressRange(ofSize size: Swift.UInt16 = .maxUnicastAddress - .minUnicastAddress + 1) -> MeshSDK.AddressRange?
  public func nextAvailableGroupAddressRange(ofSize size: Swift.UInt16 = .maxGroupAddress - .minGroupAddress + 1) -> MeshSDK.AddressRange?
  public func nextAvailableSceneRange(ofSize size: Swift.UInt16 = .maxScene - .minScene + 1) -> MeshSDK.SceneRange?
}
public struct GenericPowerLastStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let power: Swift.UInt16
  public init(power: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Scene {
  public var nodes: [MeshSDK.Node] {
    get
  }
}
public struct ConfigModelPublicationGet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(for model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct SceneRegisterGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigAppKeyUpdate : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetAndAppKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let applicationKeyIndex: MeshSDK.KeyIndex
  public let key: Foundation.Data
  public init(applicationKey: MeshSDK.ApplicationKey)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let hue: Swift.UInt16
  public let saturation: Swift.UInt16
  public let remainingTime: MeshSDK.TransitionTime?
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16)
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLSaturationSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let saturation: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(saturation: Swift.UInt16)
  public init(saturation: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerLevelSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let power: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(power: Swift.UInt16)
  public init(power: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLDefaultSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let temperature: Swift.UInt16
  public let deltaUV: Swift.Int16
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16, deltaUV: Swift.Int16)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLRangeGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct GenericMoveSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let deltaLevel: Swift.Int16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(deltaLevel: Swift.Int16)
  public init(deltaLevel: Swift.Int16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Model {
  public var name: Swift.String? {
    get
  }
}
public struct ConfigModelSubscriptionVirtualAddressDelete : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigVirtualLabelMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let virtualLabel: Foundation.UUID
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(group: MeshSDK.Group, from model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerRangeSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let range: Swift.ClosedRange<Swift.UInt16>
  public init(range: Swift.ClosedRange<Swift.UInt16>)
  public init?(parameters: Foundation.Data)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class MeshSDK : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MeshSDK.MeshSDK
  @objc public var delegate: (any MeshSDK.MXMeshDelegate)?
  @objc public var messageTimeout: Swift.Double
  @objc public var isSegmented: Swift.Bool
  @objc public var nextUnicastAddress: Swift.UInt16
  @objc public var proxyRSSI: Swift.Int
  @objc public var meshMaxConnections: Swift.Int
  public var meshNetworkManager: MeshSDK.MeshNetworkManager
  public typealias MeshMessageCallBack = ([Swift.String : Any]) -> ()
  public typealias MXMeshProvisionCallback = (Swift.Bool) -> ()
  public typealias FetchTripletCallback = ([Swift.String : Any]) -> ()
  public typealias WiFiConfigStatusCallback = (Swift.Bool) -> ()
  public typealias FetchDeviceFirmwareVersionCallback = (Swift.String) -> ()
  public typealias SendCommandCallback = (Swift.Bool) -> ()
  @objc public var listenResult: [Swift.String : Any]
  public typealias MeshGattRSSICallback = (_ peripheral: CoreBluetooth.CBPeripheral, _ rssi: Swift.Int) -> ()
  @objc public var meshGattRssiback: MeshSDK.MeshSDK.MeshGattRSSICallback?
  @objc public var connectedDeviceMac: Swift.String? {
    @objc get
  }
  @objc override dynamic public init()
  @objc public func setup(config: [Swift.String : Any]? = nil, provisioningServiceConfig: [Swift.String : Swift.String]? = nil, proxyServiceConfig: [Swift.String : Swift.String]? = nil, networkConfig: [Swift.String : Any]? = nil)
  @objc deinit
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func exportMeshNetwork(callback: (Swift.String) -> ())
  @objc dynamic public func importMeshNetwork(jsonString: Swift.String, callback: (Swift.Bool) -> ())
  @objc dynamic public func importMeshNetworkConfig(jsonString: Swift.String, callback: (Swift.Bool) -> ())
  @objc dynamic public func resetProvisionerUnicastAddress(address: Swift.UInt16)
  @objc dynamic public func setMeshNetworkSequence(seq: Swift.UInt32, updateInterval: Swift.UInt32)
  @objc dynamic public func getMeshNetworkSequence() -> Swift.UInt32
  @objc dynamic public func setMeshNetworkIvIndex(index: Swift.UInt32)
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func disconnect(mac: Swift.String? = nil)
  @objc dynamic public func connect(mac: Swift.String? = nil)
  @objc dynamic public func addMeshProxy(peripheral: CoreBluetooth.CBPeripheral, mac: Swift.String)
  @objc dynamic public func switchProxy(mac: Swift.String)
  @objc dynamic public func getCurrentProxyMac() -> Swift.String?
  @objc dynamic public func isConnected() -> Swift.Bool
  @objc dynamic public func initDeviceCache()
  @objc dynamic public func checkDeviceIsOnline(uuid: Swift.String) -> Swift.Bool
  @objc dynamic public func updateDeviceStatusCache(uuid: Swift.String, properties: [Swift.String : Any])
  @objc dynamic public func getDeviceCacheProperties(uuid: Swift.String) -> [Swift.String : Any]?
  @objc dynamic public func getNextUnicastAddress() -> Swift.UInt16
  @objc dynamic public func readCurrentGattRssi(callback: @escaping MeshSDK.MeshSDK.MeshGattRSSICallback)
}
extension MeshSDK.MeshSDK : MeshSDK.LoggerDelegate {
  public func log(message: Swift.String, ofCategory category: MeshSDK.LogCategory, withLevel level: MeshSDK.LogLevel)
}
public struct ConfigGATTProxySet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.NodeFeatureState
  public init(enable: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
public struct CompanyIdentifier {
  public static func name(for id: Swift.UInt16) -> Swift.String?
}
public struct GenericOnOffSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let isOn: Swift.Bool
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(_ isOn: Swift.Bool)
  public init(_ isOn: Swift.Bool, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigNodeIdentityStatus : MeshSDK.ConfigNetKeyMessage, MeshSDK.ConfigStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let identity: MeshSDK.NodeIdentity
  public let status: MeshSDK.ConfigMessageStatus
  public init(report identity: MeshSDK.NodeIdentity, for networkKey: MeshSDK.NetworkKey, with status: MeshSDK.ConfigMessageStatus)
  public init(responseTo request: any MeshSDK.ConfigNetKeyMessage)
  public init?(parameters: Foundation.Data)
}
public protocol ConfigMessage : MeshSDK.StaticMeshMessage {
}
public protocol AcknowledgedConfigMessage : MeshSDK.ConfigMessage, MeshSDK.StaticAcknowledgedMeshMessage {
}
public enum ConfigMessageStatus : Swift.UInt8 {
  case success
  case invalidAddress
  case invalidModel
  case invalidAppKeyIndex
  case invalidNetKeyIndex
  case insufficientResources
  case keyIndexAlreadyStored
  case invalidPublishParameters
  case notASubscribeModel
  case storageFailure
  case featureNotSupported
  case cannotUpdate
  case cannotRemove
  case cannotBind
  case temporarilyUnableToChangeState
  case cannotSet
  case unspecifiedError
  case invalidBinding
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol ConfigStatusMessage : MeshSDK.ConfigMessage, MeshSDK.StatusMessage {
  var status: MeshSDK.ConfigMessageStatus { get }
}
public protocol ConfigNetKeyMessage : MeshSDK.ConfigMessage {
  var networkKeyIndex: MeshSDK.KeyIndex { get }
}
public protocol ConfigAppKeyMessage : MeshSDK.ConfigMessage {
  var applicationKeyIndex: MeshSDK.KeyIndex { get }
}
public protocol ConfigNetAndAppKeyMessage : MeshSDK.ConfigAppKeyMessage, MeshSDK.ConfigNetKeyMessage {
}
public protocol ConfigElementMessage : MeshSDK.ConfigMessage {
  var elementAddress: MeshSDK.Address { get }
}
public protocol ConfigModelMessage : MeshSDK.ConfigElementMessage {
  var modelIdentifier: Swift.UInt16 { get }
  var modelId: Swift.UInt32 { get }
}
public protocol ConfigAnyModelMessage : MeshSDK.ConfigModelMessage {
  var companyIdentifier: Swift.UInt16? { get }
}
public protocol ConfigVendorModelMessage : MeshSDK.ConfigModelMessage {
  var companyIdentifier: Swift.UInt16 { get }
}
public protocol ConfigAddressMessage : MeshSDK.ConfigMessage {
  var address: MeshSDK.Address { get }
}
public protocol ConfigVirtualLabelMessage : MeshSDK.ConfigMessage {
  var virtualLabel: Foundation.UUID { get }
}
public protocol ConfigModelAppList : MeshSDK.ConfigModelMessage, MeshSDK.ConfigStatusMessage {
  var applicationKeyIndexes: [MeshSDK.KeyIndex] { get }
}
public protocol ConfigModelSubscriptionList : MeshSDK.ConfigModelMessage, MeshSDK.ConfigStatusMessage {
  var addresses: [MeshSDK.Address] { get }
}
@frozen public enum RemainingHeartbeatPublicationCount {
  case disabled
  case indefinitely
  case exact(_: Swift.UInt16)
  case range(_: Swift.ClosedRange<Swift.UInt16>)
  case invalid(countLog: Swift.UInt8)
}
@frozen public enum RemainingHeartbeatSubscriptionPeriod {
  case disabled
  case exact(_: Swift.UInt16)
  case range(_: Swift.ClosedRange<Swift.UInt16>)
  case invalid(periodLog: Swift.UInt8)
}
@frozen public enum HeartbeatSubscriptionCount {
  case exact(_: Swift.UInt16)
  case range(_: Swift.ClosedRange<Swift.UInt16>)
  case reallyALot
  case invalid(countLog: Swift.UInt8)
}
extension MeshSDK.ConfigStatusMessage {
  public var isSuccess: Swift.Bool {
    get
  }
  public var message: Swift.String {
    get
  }
}
extension MeshSDK.ConfigModelMessage {
  public var modelId: Swift.UInt32 {
    get
  }
}
extension MeshSDK.ConfigAnyModelMessage {
  public var isBluetoothSIGAssigned: Swift.Bool {
    get
  }
  public var modelId: Swift.UInt32 {
    get
  }
}
extension MeshSDK.ConfigVendorModelMessage {
  public var modelId: Swift.UInt32 {
    get
  }
}
extension Swift.Array where Element == any MeshSDK.ConfigMessage.Type {
  public func toMap() -> [Swift.UInt32 : any MeshSDK.MeshMessage.Type]
}
extension MeshSDK.ConfigMessageStatus : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.RemainingHeartbeatPublicationCount : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.RemainingHeartbeatSubscriptionPeriod : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.HeartbeatSubscriptionCount : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct SensorDescriptorGet : MeshSDK.AcknowledgedSensorMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty?
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty? = nil)
  public init?(parameters: Foundation.Data)
}
public struct ConfigHeartbeatSubscriptionStatus : MeshSDK.ConfigMessage, MeshSDK.ConfigStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.ConfigMessageStatus
  public let source: MeshSDK.Address
  public let destination: MeshSDK.Address
  public let periodLog: Swift.UInt8
  public var period: MeshSDK.RemainingHeartbeatSubscriptionPeriod {
    get
  }
  public let countLog: Swift.UInt8
  public var count: MeshSDK.HeartbeatSubscriptionCount {
    get
  }
  public let minHops: Swift.UInt8
  public let maxHops: Swift.UInt8
  public var isEnabled: Swift.Bool {
    get
  }
  public var isComplete: Swift.Bool {
    get
  }
  public init(_ subscription: MeshSDK.HeartbeatSubscription?)
  public init(cancel subscription: MeshSDK.HeartbeatSubscription)
  public init(responseTo request: MeshSDK.ConfigHeartbeatSubscriptionSet, with status: MeshSDK.ConfigMessageStatus)
  public init?(parameters: Foundation.Data)
}
public struct LightLCLightOnOffStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let isOn: Swift.Bool
  public let targetState: Swift.Bool?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(_ isOn: Swift.Bool)
  public init(_ isOn: Swift.Bool, targetState: Swift.Bool, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTemperatureRangeStatus : MeshSDK.GenericMessage, MeshSDK.GenericStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.GenericMessageStatus
  public let min: Swift.UInt16
  public let max: Swift.UInt16
  public var range: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(report range: Swift.ClosedRange<Swift.UInt16>)
  public init(_ status: MeshSDK.GenericMessageStatus, for request: MeshSDK.LightCTLTemperatureRangeSet)
  public init(_ status: MeshSDK.GenericMessageStatus, for request: MeshSDK.LightCTLTemperatureRangeSetUnacknowledged)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessLastStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public init(lightness: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func getGATTProxyStatus(uuid: Swift.String, callback: @escaping MeshSDK.MeshSDK.MeshMessageCallBack)
}
public enum PduType : Swift.UInt8 {
  case networkPdu
  case meshBeacon
  case proxyConfiguration
  case provisioningPdu
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct PduTypes : Swift.OptionSet {
  public let rawValue: Swift.UInt8
  public static let networkPdu: MeshSDK.PduTypes
  public static let meshBeacon: MeshSDK.PduTypes
  public static let proxyConfiguration: MeshSDK.PduTypes
  public static let provisioningPdu: MeshSDK.PduTypes
  public init(rawValue: Swift.UInt8)
  public typealias ArrayLiteralElement = MeshSDK.PduTypes
  public typealias Element = MeshSDK.PduTypes
  public typealias RawValue = Swift.UInt8
}
public protocol Transmitter : AnyObject {
  func send(_ data: Foundation.Data, ofType type: MeshSDK.PduType) throws
}
public protocol Bearer : MeshSDK.Transmitter {
  var logger: (any MeshSDK.LoggerDelegate)? { get set }
  var name: Swift.String? { get }
  var identifier: Foundation.UUID { get }
  var mac: Swift.String? { get set }
  var delegate: (any MeshSDK.BearerDelegate)? { get set }
  var dataDelegate: (any MeshSDK.BearerDataDelegate)? { get set }
  var supportedPduTypes: MeshSDK.PduTypes { get }
  var isOpen: Swift.Bool { get }
  func open()
  func close()
}
extension MeshSDK.Bearer {
  public func supports(_ pduType: MeshSDK.PduType) -> Swift.Bool
}
public protocol MeshBearer : MeshSDK.Bearer {
}
public protocol ProvisioningBearer : MeshSDK.Bearer {
}
public protocol MXProvisioningBearer : MeshSDK.MeshBearer, MeshSDK.ProvisioningBearer {
  func switchToProxyBearer() -> Swift.Bool
}
public struct GenericDefaultTransitionTimeSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let transitionTime: MeshSDK.TransitionTime
  public init(transitionTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct GenericLevelGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct GenericOnPowerUpSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.OnPowerUp
  public init(state: MeshSDK.OnPowerUp)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLDefaultSetUnacknowledged : MeshSDK.GenericMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let hue: Swift.UInt16
  public let saturation: Swift.UInt16
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Element {
  public var unicastAddress: MeshSDK.Address {
    get
  }
  public var isPrimary: Swift.Bool {
    get
  }
}
public struct ConfigDefaultTtlSet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let ttl: Swift.UInt8
  public init(ttl: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public typealias SceneNumber = Swift.UInt16
extension Swift.UInt16 {
  public static let invalidScene: MeshSDK.SceneNumber
  public static let minScene: MeshSDK.SceneNumber
  public static let maxScene: MeshSDK.SceneNumber
}
extension Swift.UInt16 {
  public var isValidSceneNumber: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers open class MXMeshDeviceScan : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate {
  @objc public static let shared: MeshSDK.MXMeshDeviceScan
  public typealias DisposedScanResultReadableCallback = ([[Swift.String : Any]]) -> ()
  @objc override dynamic public init()
  @objc public func scanDevice(mac: Swift.String?, timeout: Swift.Int, callback: @escaping MeshSDK.MXMeshDeviceScan.DisposedScanResultReadableCallback)
  @objc public func stopScan()
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc deinit
}
public struct SensorCadenceGet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTemperatureStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let temperature: Swift.UInt16
  public let deltaUV: Swift.Int16
  public let targetTemperature: Swift.UInt16?
  public let targetDeltaUV: Swift.Int16?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(temperature: Swift.UInt16, deltaUV: Swift.Int16)
  public init(temperature: Swift.UInt16, deltaUV: Swift.Int16, targetTemperature: Swift.UInt16, targetDeltaUV: Swift.Int16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.ApplicationKey {
  public func isUsed(in meshNetwork: MeshSDK.MeshNetwork) -> Swift.Bool
}
public struct LightCTLDefaultStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let temperature: Swift.UInt16
  public let deltaUV: Swift.Int16
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16, deltaUV: Swift.Int16)
  public init?(parameters: Foundation.Data)
}
public struct SensorSettingSet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public let settingProperty: MeshSDK.DeviceProperty
  public let settingValue: MeshSDK.DevicePropertyCharacteristic
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ setting: MeshSDK.DeviceProperty, of property: MeshSDK.DeviceProperty, to value: MeshSDK.DevicePropertyCharacteristic)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessDefaultSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public init(lightness: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTemperatureSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let temperature: Swift.UInt16
  public let deltaUV: Swift.Int16
  public var transitionTime: MeshSDK.TransitionTime?
  public var delay: Swift.UInt8?
  public init(temperature: Swift.UInt16, deltaUV: Swift.Int16)
  public init(temperature: Swift.UInt16, deltaUV: Swift.Int16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTemperatureGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightLCPropertyStatus : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public let property: MeshSDK.DeviceProperty
  public let propertyValue: MeshSDK.DevicePropertyCharacteristic
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, value: MeshSDK.DevicePropertyCharacteristic)
  public init?(parameters: Foundation.Data)
}
public struct SceneDeleteUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let scene: MeshSDK.SceneNumber
  public init(_ scene: MeshSDK.SceneNumber)
  public init?(parameters: Foundation.Data)
}
public struct GenericOnPowerUpGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public enum AccessError : Swift.Error {
  case invalidSource
  case invalidElement
  case invalidTtl
  case invalidDestination
  case modelNotBoundToAppKey
  case noDeviceKey
  case cannotDelete
  case timeout
  public static func == (a: MeshSDK.AccessError, b: MeshSDK.AccessError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.AccessError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension MeshSDK.MeshNetwork {
  public var localProvisioner: MeshSDK.Provisioner? {
    get
  }
  public func setLocalProvisioner(_ provisioner: MeshSDK.Provisioner) throws
  @discardableResult
  public func restoreLocalProvisioner() -> Swift.Bool
  public func isLocalProvisioner(_ provisioner: MeshSDK.Provisioner) -> Swift.Bool
  public func add(provisioner: MeshSDK.Provisioner) throws
  public func add(provisioner: MeshSDK.Provisioner, withAddress unicastAddress: MeshSDK.Address?) throws
  @discardableResult
  public func remove(provisionerAt index: Swift.Int) throws -> MeshSDK.Provisioner
  public func remove(provisioner: MeshSDK.Provisioner) throws
  public func moveProvisioner(fromIndex: Swift.Int, toIndex: Swift.Int)
  public func moveProvisioner(_ provisioner: MeshSDK.Provisioner, toIndex: Swift.Int)
  public func assign(unicastAddress address: MeshSDK.Address, for provisioner: MeshSDK.Provisioner) throws
  public func disableConfigurationCapabilities(for provisioner: MeshSDK.Provisioner)
}
public struct UnknownMessage : MeshSDK.MeshMessage {
  public var opCode: Swift.UInt32 {
    get
  }
  public let parameters: Foundation.Data?
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.UnknownMessage : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct SceneStore : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let scene: MeshSDK.SceneNumber
  public init(_ scene: MeshSDK.SceneNumber)
  public init?(parameters: Foundation.Data)
}
public struct SensorSettingStatus : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public enum SensorSettingAccess : Swift.UInt8 {
    case readonly
    case readwrite
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public let property: MeshSDK.DeviceProperty
  public let settingProperty: MeshSDK.DeviceProperty
  public let settingAccess: MeshSDK.SensorSettingStatus.SensorSettingAccess?
  public let settingValue: MeshSDK.DevicePropertyCharacteristic?
  public var parameters: Foundation.Data? {
    get
  }
  public init(settingNotFound setting: MeshSDK.DeviceProperty, for property: MeshSDK.DeviceProperty)
  public init(_ setting: MeshSDK.DeviceProperty, of property: MeshSDK.DeviceProperty, access: MeshSDK.SensorSettingStatus.SensorSettingAccess, value: MeshSDK.DevicePropertyCharacteristic)
  public init?(parameters: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class HeartbeatPublication : Swift.Codable {
  final public let address: MeshSDK.Address
  final public let periodLog: Swift.UInt8
  public var period: Swift.UInt16 {
    get
  }
  final public let ttl: Swift.UInt8
  final public let networkKeyIndex: MeshSDK.KeyIndex
  final public let features: MeshSDK.NodeFeatures
  public var isEnabled: Swift.Bool {
    get
  }
  public var isPeriodicPublicationEnabled: Swift.Bool {
    get
  }
  public var isFeatureTriggeredPublishingEnabled: Swift.Bool {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum Location : Swift.UInt16, Swift.Codable {
  case auxiliary
  case back
  case backup
  case bottom
  case eighteenth
  case eighth
  case eightieth
  case eightyEighth
  case eightyFifth
  case eightyFirst
  case eightyFourth
  case eightyNineth
  case eightySecond
  case eightySeventh
  case eightySixth
  case eightyThird
  case eleventh
  case external
  case fifteenth
  case fifth
  case fiftieth
  case fiftyEighth
  case fiftyFifth
  case fiftyFirst
  case fiftyFourth
  case fiftyNineth
  case fiftySecond
  case fiftySeventh
  case fiftySixth
  case fiftyThird
  case first
  case flash
  case fortieth
  case fourteenth
  case fourth
  case fourtyEighth
  case fourtyFifth
  case fourtyFirst
  case fourtyFourth
  case fourtyNineth
  case fourtySecond
  case fourtySeventh
  case fourtySixth
  case fourtyThird
  case front
  case inside
  case `internal`
  case left
  case lower
  case main
  case nineteenth
  case nineth
  case ninetieth
  case ninetyEighth
  case ninetyFifth
  case ninetyFirst
  case ninetyFourth
  case ninetyNineth
  case ninetySecond
  case ninetySeventh
  case ninetySixth
  case ninetyThird
  case oneHundredAndEighteenth
  case oneHundredAndEighth
  case oneHundredAndEightyEighth
  case oneHundredAndEightyFifth
  case oneHundredAndEightyFirst
  case oneHundredAndEightyFourth
  case oneHundredAndEightyNineth
  case oneHundredAndEightySecond
  case oneHundredAndEightySeventh
  case oneHundredAndEightySixth
  case oneHundredAndEightyThird
  case oneHundredAndEleventh
  case oneHundredAndFifteenth
  case oneHundredAndFifth
  case oneHundredAndFiftyEighth
  case oneHundredAndFiftyFifth
  case oneHundredAndFiftyFirst
  case oneHundredAndFiftyFourth
  case oneHundredAndFiftyNineth
  case oneHundredAndFiftySecond
  case oneHundredAndFiftySeventh
  case oneHundredAndFiftySixth
  case oneHundredAndFiftyThird
  case oneHundredAndFirst
  case oneHundredAndFourteenth
  case oneHundredAndFourth
  case oneHundredAndFourtyEighth
  case oneHundredAndFourtyFifth
  case oneHundredAndFourtyFirst
  case oneHundredAndFourtyFourth
  case oneHundredAndFourtyNineth
  case oneHundredAndFourtySecond
  case oneHundredAndFourtySeventh
  case oneHundredAndFourtySixth
  case oneHundredAndFourtyThird
  case oneHundredAndNineteenth
  case oneHundredAndNineth
  case oneHundredAndNinetyEighth
  case oneHundredAndNinetyFifth
  case oneHundredAndNinetyFirst
  case oneHundredAndNinetyFourth
  case oneHundredAndNinetyNineth
  case oneHundredAndNinetySecond
  case oneHundredAndNinetySeventh
  case oneHundredAndNinetySixth
  case oneHundredAndNinetyThird
  case oneHundredAndSecond
  case oneHundredAndSeventeenth
  case oneHundredAndSeventh
  case oneHundredAndSeventyEighth
  case oneHundredAndSeventyFifth
  case oneHundredAndSeventyFirst
  case oneHundredAndSeventyFourth
  case oneHundredAndSeventyNineth
  case oneHundredAndSeventySecond
  case oneHundredAndSeventySeventh
  case oneHundredAndSeventySixth
  case oneHundredAndSeventyThird
  case oneHundredAndSixteenth
  case oneHundredAndSixth
  case oneHundredAndSixtyEighth
  case oneHundredAndSixtyFifth
  case oneHundredAndSixtyFirst
  case oneHundredAndSixtyFourth
  case oneHundredAndSixtyNineth
  case oneHundredAndSixtySecond
  case oneHundredAndSixtySeventh
  case oneHundredAndSixtySixth
  case oneHundredAndSixtyThird
  case oneHundredAndTenth
  case oneHundredAndThird
  case oneHundredAndThirteenth
  case oneHundredAndThirtyEighth
  case oneHundredAndThirtyFifth
  case oneHundredAndThirtyFirst
  case oneHundredAndThirtyFourth
  case oneHundredAndThirtyNineth
  case oneHundredAndThirtySecond
  case oneHundredAndThirtySeventh
  case oneHundredAndThirtySixth
  case oneHundredAndThirtyThird
  case oneHundredAndTwelveth
  case oneHundredAndTwentyEighth
  case oneHundredAndTwentyFifth
  case oneHundredAndTwentyFirst
  case oneHundredAndTwentyFourth
  case oneHundredAndTwentyNineth
  case oneHundredAndTwentySecond
  case oneHundredAndTwentySeventh
  case oneHundredAndTwentySixth
  case oneHundredAndTwentyThird
  case oneHundredEightieth
  case oneHundredFiftieth
  case oneHundredFortieth
  case oneHundredNinetieth
  case oneHundredSeventieth
  case oneHundredSixtieth
  case oneHundredThirtieth
  case oneHundredTwentieth
  case oneHundredth
  case outside
  case right
  case second
  case seventeenth
  case seventh
  case seventieth
  case seventyEighth
  case seventyFifth
  case seventyFirst
  case seventyFourth
  case seventyNineth
  case seventySecond
  case seventySeventh
  case seventySixth
  case seventyThird
  case sixteenth
  case sixth
  case sixtieth
  case sixtyEighth
  case sixtyFifth
  case sixtyFirst
  case sixtyFourth
  case sixtyNineth
  case sixtySecond
  case sixtySeventh
  case sixtySixth
  case sixtyThird
  case supplementary
  case tenth
  case third
  case thirteenth
  case thirtieth
  case thirtyEighth
  case thirtyFifth
  case thirtyFirst
  case thirtyFourth
  case thirtyNineth
  case thirtySecond
  case thirtySeventh
  case thirtySixth
  case thirtyThird
  case top
  case twelveth
  case twentieth
  case twentyEighth
  case twentyFifth
  case twentyFirst
  case twentyFourth
  case twentyNineth
  case twentySecond
  case twentySeventh
  case twentySixth
  case twentyThird
  case twoHundredAndEighteenth
  case twoHundredAndEighth
  case twoHundredAndEleventh
  case twoHundredAndFifteenth
  case twoHundredAndFifth
  case twoHundredAndFiftyFifth
  case twoHundredAndFiftyFirst
  case twoHundredAndFiftyFourth
  case twoHundredAndFiftySecond
  case twoHundredAndFiftyThird
  case twoHundredAndFirst
  case twoHundredAndFourteenth
  case twoHundredAndFourth
  case twoHundredAndFourtyEighth
  case twoHundredAndFourtyFifth
  case twoHundredAndFourtyFirst
  case twoHundredAndFourtyFourth
  case twoHundredAndFourtyNineth
  case twoHundredAndFourtySecond
  case twoHundredAndFourtySeventh
  case twoHundredAndFourtySixth
  case twoHundredAndFourtyThird
  case twoHundredAndNineteenth
  case twoHundredAndNineth
  case twoHundredAndSecond
  case twoHundredAndSeventeenth
  case twoHundredAndSeventh
  case twoHundredAndSixteenth
  case twoHundredAndSixth
  case twoHundredAndTenth
  case twoHundredAndThird
  case twoHundredAndThirteenth
  case twoHundredAndThirtyEighth
  case twoHundredAndThirtyFifth
  case twoHundredAndThirtyFirst
  case twoHundredAndThirtyFourth
  case twoHundredAndThirtyNineth
  case twoHundredAndThirtySecond
  case twoHundredAndThirtySeventh
  case twoHundredAndThirtySixth
  case twoHundredAndThirtyThird
  case twoHundredAndTwelveth
  case twoHundredAndTwentyEighth
  case twoHundredAndTwentyFifth
  case twoHundredAndTwentyFirst
  case twoHundredAndTwentyFourth
  case twoHundredAndTwentyNineth
  case twoHundredAndTwentySecond
  case twoHundredAndTwentySeventh
  case twoHundredAndTwentySixth
  case twoHundredAndTwentyThird
  case twoHundredFiftieth
  case twoHundredFortieth
  case twoHundredThirtieth
  case twoHundredTwentieth
  case twoHundredth
  case unknown
  case upper
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
extension MeshSDK.Location : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct LightHSLHueSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let hue: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(hue: Swift.UInt16)
  public init(hue: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigRelaySet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.NodeFeatureState
  public let count: Swift.UInt8
  public let steps: Swift.UInt8
  public var interval: Foundation.TimeInterval {
    get
  }
  public init()
  public init(count: Swift.UInt8, steps: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let temperature: Swift.UInt16
  public let deltaUV: Swift.Int16
  public var transitionTime: MeshSDK.TransitionTime?
  public var delay: Swift.UInt8?
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16, deltaUV: Swift.Int16)
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16, deltaUV: Swift.Int16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public class MeshNetworkManager {
  public var proxyFilter: MeshSDK.ProxyFilter {
    get
  }
  weak public var logger: (any MeshSDK.LoggerDelegate)?
  weak public var delegate: (any MeshSDK.MeshNetworkDelegate)?
  weak public var transmitter: (any MeshSDK.Transmitter)?
  public var defaultTtl: Swift.UInt8
  public var incompleteMessageTimeout: Swift.Double
  public var acknowledgmentTimerInterval: Swift.Double
  public var transmissionTimerInterval: Swift.Double
  public var retransmissionLimit: Swift.Int
  public var acknowledgmentMessageTimeout: Swift.Double
  public var acknowledgmentMessageInterval: Swift.Double
  public var allowIvIndexRecoveryOver42: Swift.Bool
  public var ivUpdateTestMode: Swift.Bool
  public var meshNetwork: MeshSDK.MeshNetwork? {
    get
  }
  public var isNetworkCreated: Swift.Bool {
    get
  }
  public init(using storage: any MeshSDK.Storage = LocalStorage(), queue: Dispatch.DispatchQueue = DispatchQueue.global(qos: .background), delegateQueue: Dispatch.DispatchQueue = DispatchQueue.main)
  convenience public init(using fileName: Swift.String)
  @objc deinit
}
extension MeshSDK.MeshNetworkManager {
  public func createNewMeshNetwork(withName name: Swift.String, by provisionerName: Swift.String) -> MeshSDK.MeshNetwork
  public func createNewMeshNetwork(withName name: Swift.String, meshUUID: Foundation.UUID = UUID(), by provisioner: MeshSDK.Provisioner) -> MeshSDK.MeshNetwork
  public var localElements: [MeshSDK.Element] {
    get
    set
  }
}
extension MeshSDK.MeshNetworkManager {
  public func provision(unprovisionedDevice: MeshSDK.UnprovisionedDevice, over bearer: any MeshSDK.ProvisioningBearer) throws -> MeshSDK.ProvisioningManager
}
extension MeshSDK.MeshNetworkManager {
  public func bearerDidDeliverData(_ data: Foundation.Data, ofType type: MeshSDK.PduType)
  @discardableResult
  public func publish(_ message: any MeshSDK.MeshMessage, from model: MeshSDK.Model) -> MeshSDK.MessageHandle?
  @discardableResult
  public func send(_ message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element? = nil, to destination: MeshSDK.MeshAddress, withTtl initialTtl: Swift.UInt8? = nil, using applicationKey: MeshSDK.ApplicationKey) throws -> MeshSDK.MessageHandle
  @discardableResult
  public func send(_ message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element? = nil, to group: MeshSDK.Group, withTtl initialTtl: Swift.UInt8? = nil, using applicationKey: MeshSDK.ApplicationKey) throws -> MeshSDK.MessageHandle
  @discardableResult
  public func send(_ message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element? = nil, to model: MeshSDK.Model, withTtl initialTtl: Swift.UInt8? = nil) throws -> MeshSDK.MessageHandle
  @discardableResult
  public func send(_ message: any MeshSDK.MeshMessage, from localModel: MeshSDK.Model, to model: MeshSDK.Model, withTtl initialTtl: Swift.UInt8? = nil) throws -> MeshSDK.MessageHandle
  @discardableResult
  public func send(_ message: any MeshSDK.ConfigMessage, to destination: MeshSDK.Address, withTtl initialTtl: Swift.UInt8? = nil) throws -> MeshSDK.MessageHandle
  @discardableResult
  public func send(_ message: any MeshSDK.ConfigMessage, to node: MeshSDK.Node, withTtl initialTtl: Swift.UInt8? = nil) throws -> MeshSDK.MessageHandle
  @discardableResult
  public func sendToLocalNode(_ message: any MeshSDK.ConfigMessage) throws -> MeshSDK.MessageHandle
  public func send(_ message: any MeshSDK.ProxyConfigurationMessage) throws
  public func cancel(_ messageId: MeshSDK.MessageHandle) throws
}
extension MeshSDK.MeshNetworkManager : MeshSDK.BearerDataDelegate {
  public func bearer(_ bearer: any MeshSDK.Bearer, didDeliverData data: Foundation.Data, ofType type: MeshSDK.PduType)
}
extension MeshSDK.MeshNetworkManager {
  public func setSequenceNumber(_ sequence: Swift.UInt32, forLocalElement element: MeshSDK.Element)
  public func getSequenceNumber(ofLocalElement element: MeshSDK.Element) -> Swift.UInt32?
}
extension MeshSDK.MeshNetworkManager {
  public func load() throws -> Swift.Bool
  public func save() -> Swift.Bool
}
extension MeshSDK.MeshNetworkManager {
  public func export() -> Foundation.Data
  public func export(_ configuration: MeshSDK.ExportConfiguration) -> Foundation.Data
  public func `import`(from data: Foundation.Data) throws -> MeshSDK.MeshNetwork
}
public struct GenericDefaultTransitionTimeGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshNetwork {
  public var nextAvailableApplicationKeyIndex: MeshSDK.KeyIndex? {
    get
  }
  public var nextAvailableNetworkKeyIndex: MeshSDK.KeyIndex? {
    get
  }
  @discardableResult
  public func add(applicationKey: Foundation.Data, withIndex index: MeshSDK.KeyIndex? = nil, name: Swift.String) throws -> MeshSDK.ApplicationKey
  public func remove(applicationKeyWithKeyIndex index: MeshSDK.KeyIndex, force: Swift.Bool = false) throws
  public func remove(applicationKeyAt index: Swift.Int, force: Swift.Bool = false) throws -> MeshSDK.ApplicationKey
  public func remove(applicationKey: MeshSDK.ApplicationKey, force: Swift.Bool = false) throws
  @discardableResult
  public func add(networkKey: Foundation.Data, withIndex index: MeshSDK.KeyIndex? = nil, name: Swift.String) throws -> MeshSDK.NetworkKey
  public func remove(networkKeyWithKeyIndex index: MeshSDK.KeyIndex, force: Swift.Bool = false) throws
  public func remove(networkKeyAt index: Swift.Int, force: Swift.Bool = false) throws -> MeshSDK.NetworkKey
  public func remove(networkKey: MeshSDK.NetworkKey, force: Swift.Bool = false) throws
}
public struct ConfigVendorModelSubscriptionGet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigVendorModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16
  public init?(of model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTemperatureSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let temperature: Swift.UInt16
  public let deltaUV: Swift.Int16
  public var transitionTime: MeshSDK.TransitionTime?
  public var delay: Swift.UInt8?
  public init(temperature: Swift.UInt16, deltaUV: Swift.Int16)
  public init(temperature: Swift.UInt16, deltaUV: Swift.Int16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigFriendStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.NodeFeatureState
  public init(_ state: MeshSDK.NodeFeatureState)
  public init(for node: MeshSDK.Node)
  public init?(parameters: Foundation.Data)
}
public struct ConfigAppKeyDelete : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetAndAppKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let applicationKeyIndex: MeshSDK.KeyIndex
  public init(applicationKey: MeshSDK.ApplicationKey)
  public init?(parameters: Foundation.Data)
}
public enum VendorMessageOpCode : Swift.String {
  case VendorMessage_Attr_Get
  case VendorMessage_Attr_Set
  case VendorMessage_Attr_Set_Unacknowledged
  case VendorMessage_Attr_Status
  case VendorMessage_Heartbeat
  case VendorMessage_Attr_Sync
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MeshMessageSendStatusCode : Swift.Int {
  case MeshMessageSendStatus_Success
  case MeshMessageSendStatus_NoNode
  case MeshMessageSendStatus_NoElement
  case MeshMessageSendStatus_NoModel
  case MeshMessageSendStatus_NoAppKey
  case MeshMessageSendStatus_NetworkKey_UnbindAppKey
  case MeshMessageSendStatus_timeout
  case MeshMessageSendStatus_Disconnect
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MeshSDK.MeshSDK : MeshSDK.MeshNetworkDelegate {
  @objc dynamic public func sendMeshMessage(opCode: Swift.String, uuid: Swift.String, elementIndex: Swift.Int = 0, tid: Swift.String? = nil, message: Any, repeatNum: Swift.Int = 1, timeout: Foundation.TimeInterval = MeshSDK.sharedInstance.messageTimeout, networkKey: Swift.String? = nil, isQueue: Swift.Bool = true, isRetry: Swift.Bool = false, callback: MeshSDK.MeshSDK.MeshMessageCallBack? = nil)
  @objc dynamic public func sendMessage(address: Swift.String, opCode: Swift.String, tid: Swift.String? = nil, message: Any, networkKey: Swift.String, repeatNum: Swift.Int = 1, isQueue: Swift.Bool = true)
  public func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, didReceiveMessage message: any MeshSDK.MeshMessage, sentFrom source: MeshSDK.Address, to destination: MeshSDK.Address)
  public func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, didSendMessage message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element, to destination: MeshSDK.Address)
  public func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, failedToSendMessage message: any MeshSDK.MeshMessage, from localElement: MeshSDK.Element, to destination: MeshSDK.Address, error: any Swift.Error)
  public func meshNetworkManager(_ manager: MeshSDK.MeshNetworkManager, ivIndexDidUpdate index: Swift.UInt32)
}
public enum ProvisioningState {
  case ready
  case requestingCapabilities
  case capabilitiesReceived(_: MeshSDK.ProvisioningCapabilities)
  case provisioning
  case complete
  case fail(_: any Swift.Error)
}
public enum ProvisioningError : Swift.Error {
  case invalidState
  case invalidPdu
  case unsupportedAlgorithm
  case unsupportedDevice
  case invalidOobValueFormat
  case noAddressAvailable
  case addressNotSpecified
  case networkKeyNotSpecified
  case confirmationFailed
  case remoteError(_: MeshSDK.RemoteProvisioningError)
  case keyGenerationFailed(_: Darwin.OSStatus)
}
public enum RemoteProvisioningError : Swift.UInt8 {
  case invalidPdu
  case invalidFormat
  case unexpectedPdu
  case confirmationFailed
  case outOfResources
  case decryptionFailed
  case unexpectedError
  case cannotAssignAddresses
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum AuthAction {
  case provideStaticKey(callback: (Foundation.Data) -> Swift.Void)
  case provideNumeric(maximumNumberOfDigits: Swift.UInt8, outputAction: MeshSDK.OutputAction, callback: (Swift.UInt) -> Swift.Void)
  case provideAlphanumeric(maximumNumberOfCharacters: Swift.UInt8, callback: (Swift.String) -> Swift.Void)
  case displayNumber(_: Swift.UInt, inputAction: MeshSDK.InputAction)
  case displayAlphanumeric(_: Swift.String)
}
extension MeshSDK.ProvisioningState : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.ProvisioningError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension MeshSDK.RemoteProvisioningError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum OnPowerUp : Swift.UInt8 {
  case off
  case `default`
  case restore
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension MeshSDK.OnPowerUp : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct GenericPowerLevelSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let power: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(power: Swift.UInt16)
  public init(power: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigNetKeyList : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndexes: [MeshSDK.KeyIndex]
  public init(networkKeys: [MeshSDK.NetworkKey])
  public init?(parameters: Foundation.Data)
}
public struct LightLCModeSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ status: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class Scene : Swift.Codable {
  final public let number: MeshSDK.SceneNumber
  public var name: Swift.String
  public var addresses: [MeshSDK.Address] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension MeshSDK.Scene : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: MeshSDK.Scene, rhs: MeshSDK.Scene) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConfigModelSubscriptionOverwrite : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAddressMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let address: MeshSDK.Address
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(group: MeshSDK.Group, to model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct SetFilterType : MeshSDK.StaticAcknowledgedProxyConfigurationMessage {
  public static let opCode: Swift.UInt8
  public static let responseType: any MeshSDK.StaticProxyConfigurationMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let filterType: MeshSDK.ProxyFilerType
  public init(_ type: MeshSDK.ProxyFilerType)
  public init?(parameters: Foundation.Data)
}
extension Swift.Array where Element == MeshSDK.ApplicationKey {
  public subscript(keyIndex: MeshSDK.KeyIndex) -> MeshSDK.ApplicationKey? {
    get
  }
  public func knownTo(node: MeshSDK.Node) -> [MeshSDK.ApplicationKey]
  public func notKnownTo(node: MeshSDK.Node) -> [MeshSDK.ApplicationKey]
}
public enum ExportConfiguration {
  public enum NetworkKeysConfiguration {
    case all
    case some([MeshSDK.NetworkKey])
  }
  public enum ApplicationKeysConfiguration {
    case all
    case some([MeshSDK.ApplicationKey])
  }
  public enum ProvisionersConfiguration {
    case all
    case one(MeshSDK.Provisioner)
    case some([MeshSDK.Provisioner])
  }
  public enum NodesConfiguration {
    case allWithDeviceKey
    case allWithoutDeviceKey
    case some(withDeviceKey: [MeshSDK.Node], andSomeWithout: [MeshSDK.Node])
  }
  public enum GroupsConfiguration {
    case all
    case related
    case some([MeshSDK.Group])
  }
  public enum ScenesConfiguration {
    case all
    case related
    case some([MeshSDK.Scene])
  }
  case full
  case partial(networkKeys: MeshSDK.ExportConfiguration.NetworkKeysConfiguration, applicationKeys: MeshSDK.ExportConfiguration.ApplicationKeysConfiguration, provisioners: MeshSDK.ExportConfiguration.ProvisionersConfiguration, nodes: MeshSDK.ExportConfiguration.NodesConfiguration, groups: MeshSDK.ExportConfiguration.GroupsConfiguration = .related, scenes: MeshSDK.ExportConfiguration.ScenesConfiguration = .related)
}
extension Foundation.Data {
  public static func random128BitKey() -> Foundation.Data
}
public struct ConfigModelSubscriptionDeleteAll : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(from model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct TransitionTime {
  public let steps: Swift.UInt8
  public let stepResolution: MeshSDK.StepResolution
  public var milliseconds: Swift.Int {
    get
  }
  public var interval: Foundation.TimeInterval {
    get
  }
  public init(steps: Swift.UInt8, stepResolution: MeshSDK.StepResolution)
  public init()
  public init(_ interval: Foundation.TimeInterval)
}
extension MeshSDK.TransitionTime {
  public static let immediate: MeshSDK.TransitionTime
  public static let unknown: MeshSDK.TransitionTime
  public var isKnown: Swift.Bool {
    get
  }
  public var isImmediate: Swift.Bool {
    get
  }
}
extension Swift.Optional where Wrapped == MeshSDK.TransitionTime {
  public func or(_ defaultTransitionTime: MeshSDK.TransitionTime?) -> MeshSDK.TransitionTime
}
extension MeshSDK.TransitionTime : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigNetKeyDelete : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public init(networkKey: MeshSDK.NetworkKey)
  public init?(parameters: Foundation.Data)
}
public struct ConfigKeyRefreshPhaseStatus : MeshSDK.ConfigNetKeyMessage, MeshSDK.ConfigStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let status: MeshSDK.ConfigMessageStatus
  public let phase: MeshSDK.KeyRefreshPhase
  public init(responseTo request: any MeshSDK.ConfigNetKeyMessage, with error: MeshSDK.ConfigMessageStatus)
  public init(reportPhaseOf networkKey: MeshSDK.NetworkKey)
  public init?(parameters: Foundation.Data)
}
public struct GenericOnPowerUpStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.OnPowerUp
  public init(state: MeshSDK.OnPowerUp)
  public init?(parameters: Foundation.Data)
}
public struct LightHSLTargetStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let targetLightness: Swift.UInt16
  public let targetHue: Swift.UInt16
  public let targetSaturation: Swift.UInt16
  public let remainingTime: MeshSDK.TransitionTime?
  public init(targetLightness: Swift.UInt16, targetHue: Swift.UInt16, targetSaturation: Swift.UInt16)
  public init(targetLightness: Swift.UInt16, targetHue: Swift.UInt16, targetSaturation: Swift.UInt16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshNetwork {
  public func node(for provisioner: MeshSDK.Provisioner) -> MeshSDK.Node?
  public func node(for unprovisionedDevice: MeshSDK.UnprovisionedDevice) -> MeshSDK.Node?
  public func node(withUuid uuid: Foundation.UUID) -> MeshSDK.Node?
  public func node(withAddress address: MeshSDK.Address) -> MeshSDK.Node?
  public func node(matchingHash hash: Foundation.Data, random: Foundation.Data) -> MeshSDK.Node?
  public func matches(networkId: Foundation.Data) -> Swift.Bool
  public func matches(hash: Foundation.Data, random: Foundation.Data) -> Swift.Bool
  public func add(node: MeshSDK.Node) throws
  public func remove(node: MeshSDK.Node)
  public func update(node: MeshSDK.Node)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class MXMeshProvisionManager : ObjectiveC.NSObject {
  @objc public static let shared: MeshSDK.MXMeshProvisionManager
  @objc public var isNeedCompositionData: Swift.Bool
  @objc weak public var provisionDelegate: (any MeshSDK.MXMeshProvisioningDelegate)?
  @objc public var isBusy: Swift.Bool
  @objc public func mxProvisionFinish()
  @objc public func startUnprovisionedDeviceProvision(device: MeshSDK.UnprovisionedDevice, peripheral: CoreBluetooth.CBPeripheral, networkKey: Swift.String, delegate: (any MeshSDK.MXMeshProvisioningDelegate)? = nil)
  @objc public func nextGattSwitch()
  @objc public func startUnprovisionedDeviceProvision(mac: Swift.String, networkKey: Swift.String, delegate: (any MeshSDK.MXMeshProvisioningDelegate)? = nil)
  @objc public func startUnprovisionedDeviceProvision(advertisementData: [Swift.String : Any], peripheral: CoreBluetooth.CBPeripheral, networkKey: Swift.String, provisioningDelegate: (any MeshSDK.MXMeshProvisioningDelegate)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Model : Swift.Codable {
  public var modelIdentifier: Swift.UInt16 {
    get
  }
  public var companyIdentifier: Swift.UInt16? {
    get
  }
  public var isBluetoothSIGAssigned: Swift.Bool {
    get
  }
  public var subscriptions: [MeshSDK.Group] {
    get
  }
  public var publish: MeshSDK.Publish? {
    get
  }
  final public let delegate: (any MeshSDK.ModelDelegate)?
  weak public var parentElement: MeshSDK.Element?
  public init(modelId: Swift.UInt32)
  convenience public init(vendorModelId: Swift.UInt16, companyId: Swift.UInt16, delegate: any MeshSDK.ModelDelegate)
  convenience public init(sigModelId: Swift.UInt16, delegate: any MeshSDK.ModelDelegate)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension MeshSDK.Model {
  public func copy(from model: MeshSDK.Model)
  public func set(boundApplicationKeysWithIndexes applicationKeyIndexes: [MeshSDK.KeyIndex])
  public func bind(applicationKeyWithIndex applicationKeyIndex: MeshSDK.KeyIndex)
  public func unbind(applicationKeyWithIndex applicationKeyIndex: MeshSDK.KeyIndex)
  public func set(publication publish: MeshSDK.Publish)
  public func clearPublication()
  public func subscribe(to group: MeshSDK.Group)
  public func unsubscribe(from group: MeshSDK.Group)
  public func unsubscribe(from address: MeshSDK.Address)
  public func unsubscribeFromAll()
}
extension MeshSDK.Model : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: MeshSDK.Model, rhs: MeshSDK.Model) -> Swift.Bool
  public static func != (lhs: MeshSDK.Model, rhs: MeshSDK.Model) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum KeyRefreshPhase : Swift.Int, Swift.Codable {
  case normalOperation
  case keyDistribution
  case usingNewKeys
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum KeyRefreshPhaseTransition : Swift.UInt8 {
  case useNewKeys
  case revokeOldKeys
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension MeshSDK.KeyRefreshPhase : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.KeyRefreshPhaseTransition : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public protocol Storage {
  func load() -> Foundation.Data?
  func save(_ data: Foundation.Data) -> Swift.Bool
}
open class LocalStorage : MeshSDK.Storage {
  public init(fileName: Swift.String = "MeshNetwork.json")
  public func load() -> Foundation.Data?
  public func save(_ data: Foundation.Data) -> Swift.Bool
  open func getStorageFile() -> Foundation.URL?
  @objc deinit
}
public struct LightLCModeSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ status: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
extension Swift.ClosedRange where Bound == Swift.UInt16 {
  public func isInside(_ other: Swift.ClosedRange<Swift.UInt16>) -> Swift.Bool
}
public struct ConfigNodeIdentityGet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public init(networkKey: MeshSDK.NetworkKey)
  public init?(parameters: Foundation.Data)
}
@_inheritsConvenienceInitializers open class PBGattBearer : MeshSDK.BaseGattProxyBearer<MeshSDK.MeshProvisioningService>, MeshSDK.ProvisioningBearer {
  override public var supportedPduTypes: MeshSDK.PduTypes {
    get
  }
  override public init(targetWithIdentifier uuid: Foundation.UUID)
  @objc deinit
}
extension MeshSDK.Node {
  public var isCompositionDataReceived: Swift.Bool {
    get
  }
  public var isProvisioner: Swift.Bool {
    get
  }
  public var isLocalProvisioner: Swift.Bool {
    get
  }
  public var provisioner: MeshSDK.Provisioner? {
    get
  }
}
extension Foundation.Data {
  public var hex: Swift.String {
    get
  }
}
public struct SensorCadenceSet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public let cadence: MeshSDK.SensorCadence
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, to cadence: MeshSDK.SensorCadence)
  public init?(parameters: Foundation.Data)
}
public struct LightLCLightOnOffSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let isOn: Swift.Bool
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(_ isOn: Swift.Bool)
  public init(_ isOn: Swift.Bool, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct SceneStatus : MeshSDK.GenericMessage, MeshSDK.SceneStatusMessage, MeshSDK.TransitionStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.SceneMessageStatus
  public let remainingTime: MeshSDK.TransitionTime?
  public let scene: MeshSDK.SceneNumber
  public let targetScene: MeshSDK.SceneNumber?
  public init(report scene: MeshSDK.SceneNumber)
  public init(report scene: MeshSDK.SceneNumber, with status: MeshSDK.SceneMessageStatus)
  public init(report targetScene: MeshSDK.SceneNumber, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct SceneRecall : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let scene: MeshSDK.SceneNumber
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(_ scene: MeshSDK.SceneNumber)
  public init(_ scene: MeshSDK.SceneNumber, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct LightLCLightOnOffGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerDefaultStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let power: Swift.UInt16
  public init(power: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public struct OobInformation : Swift.OptionSet {
  public let rawValue: Swift.UInt16
  public static let other: MeshSDK.OobInformation
  public static let electronicURI: MeshSDK.OobInformation
  public static let qrCode: MeshSDK.OobInformation
  public static let barCode: MeshSDK.OobInformation
  public static let nfc: MeshSDK.OobInformation
  public static let number: MeshSDK.OobInformation
  public static let string: MeshSDK.OobInformation
  public static let onBox: MeshSDK.OobInformation
  public static let insideBox: MeshSDK.OobInformation
  public static let onPieceOfPaper: MeshSDK.OobInformation
  public static let insideManual: MeshSDK.OobInformation
  public static let onDevice: MeshSDK.OobInformation
  public init(rawValue: Swift.UInt16)
  public typealias ArrayLiteralElement = MeshSDK.OobInformation
  public typealias Element = MeshSDK.OobInformation
  public typealias RawValue = Swift.UInt16
}
public enum AuthenticationMethod {
  case noOob
  case staticOob
  case outputOob(action: MeshSDK.OutputAction, size: Swift.UInt8)
  case inputOob(action: MeshSDK.InputAction, size: Swift.UInt8)
}
public enum OutputAction : Swift.UInt8 {
  case blink
  case beep
  case vibrate
  case outputNumeric
  case outputAlphanumeric
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum InputAction : Swift.UInt8 {
  case push
  case twist
  case inputNumeric
  case inputAlphanumeric
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct StaticOobType : Swift.OptionSet {
  public let rawValue: Swift.UInt8
  public static let staticOobInformationAvailable: MeshSDK.StaticOobType
  public init(rawValue: Swift.UInt8)
  public var count: Swift.Int {
    get
  }
  public typealias ArrayLiteralElement = MeshSDK.StaticOobType
  public typealias Element = MeshSDK.StaticOobType
  public typealias RawValue = Swift.UInt8
}
public struct OutputOobActions : Swift.OptionSet {
  public let rawValue: Swift.UInt16
  public static let blink: MeshSDK.OutputOobActions
  public static let beep: MeshSDK.OutputOobActions
  public static let vibrate: MeshSDK.OutputOobActions
  public static let outputNumeric: MeshSDK.OutputOobActions
  public static let outputAlphanumeric: MeshSDK.OutputOobActions
  public init(rawValue: Swift.UInt16)
  public var count: Swift.Int {
    get
  }
  public typealias ArrayLiteralElement = MeshSDK.OutputOobActions
  public typealias Element = MeshSDK.OutputOobActions
  public typealias RawValue = Swift.UInt16
}
public struct InputOobActions : Swift.OptionSet {
  public let rawValue: Swift.UInt16
  public static let push: MeshSDK.InputOobActions
  public static let twist: MeshSDK.InputOobActions
  public static let inputNumeric: MeshSDK.InputOobActions
  public static let inputAlphanumeric: MeshSDK.InputOobActions
  public init(rawValue: Swift.UInt16)
  public var count: Swift.Int {
    get
  }
  public typealias ArrayLiteralElement = MeshSDK.InputOobActions
  public typealias Element = MeshSDK.InputOobActions
  public typealias RawValue = Swift.UInt16
}
extension MeshSDK.OobInformation : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.AuthenticationMethod : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.OutputAction : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.InputAction : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.StaticOobType : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.OutputOobActions : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.InputOobActions : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.Model {
  public var boundApplicationKeys: [MeshSDK.ApplicationKey] {
    get
  }
  public func isBoundTo(_ applicationKey: MeshSDK.ApplicationKey) -> Swift.Bool
}
public struct LightHSLRangeSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let minHue: Swift.UInt16
  public let maxHue: Swift.UInt16
  public let minSaturation: Swift.UInt16
  public let maxSaturation: Swift.UInt16
  public var hueRange: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public var saturationRange: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(hueRange: Swift.ClosedRange<Swift.UInt16>, saturationRange: Swift.ClosedRange<Swift.UInt16>)
  public init?(parameters: Foundation.Data)
}
public struct SceneRecallUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let scene: MeshSDK.SceneNumber
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(_ scene: MeshSDK.SceneNumber)
  public init(_ scene: MeshSDK.SceneNumber, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func fetchDeviceTriplet(uuid: Swift.String, callback: @escaping MeshSDK.MeshSDK.FetchTripletCallback)
  @objc dynamic public func fogDeviceTriplet(uuid: Swift.String, callback: @escaping MeshSDK.MeshSDK.FetchTripletCallback)
  @objc dynamic public func sendSyncMessage(networkKey: Swift.String)
  @objc dynamic public func rebootDevice(uuid: Swift.String)
  @objc dynamic public func fetchDeviceFirmwareVersion(uuid: Swift.String, callback: @escaping MeshSDK.MeshSDK.FetchDeviceFirmwareVersionCallback)
  @objc dynamic public func triggerVirtualButton(vid: Swift.String, networkKey: Swift.String, repeatNum: Swift.Int)
  @objc dynamic public func writeLinkageRulesToDevice(uuid: Swift.String, rule: Swift.String, callback: @escaping MeshSDK.MeshSDK.SendCommandCallback)
  @objc dynamic public func writeRules(uuid: Swift.String, ruleId: Swift.Int, rule: Swift.String = "", callback: @escaping MeshSDK.MeshSDK.SendCommandCallback)
  @objc dynamic public func sendWiFiPasswordToDevice(uuid: Swift.String, ssid: Swift.String, password: Swift.String?, isUpdate: Swift.Bool = false, callback: @escaping MeshSDK.MeshSDK.WiFiConfigStatusCallback)
  @objc dynamic public func groupAddDevice(uuid: Swift.String, groups: [[Swift.String : Any]]? = nil, callback: @escaping MeshSDK.MeshSDK.SendCommandCallback)
  @objc dynamic public func groupDeleteDevice(uuid: Swift.String, groups: [[Swift.String : Any]]? = nil, callback: @escaping MeshSDK.MeshSDK.SendCommandCallback)
  @objc dynamic public func resetDeviceGroupSetting(uuid: Swift.String, groups: [[Swift.String : Any]]? = nil, callback: @escaping MeshSDK.MeshSDK.SendCommandCallback)
  @objc dynamic public func subscribeGroup(uuid: Swift.String, address: Swift.Int, callback: @escaping MeshSDK.MeshSDK.SendCommandCallback)
}
public struct ConfigModelSubscriptionStatus : MeshSDK.ConfigStatusMessage, MeshSDK.ConfigAddressMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.ConfigMessageStatus
  public let address: MeshSDK.Address
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init<T>(responseTo request: T, with status: MeshSDK.ConfigMessageStatus) where T : MeshSDK.ConfigAddressMessage, T : MeshSDK.ConfigAnyModelMessage
  public init<T>(responseTo request: T, with status: MeshSDK.ConfigMessageStatus) where T : MeshSDK.ConfigAnyModelMessage, T : MeshSDK.ConfigVirtualLabelMessage
  public init(responseTo request: MeshSDK.ConfigModelSubscriptionDeleteAll, with status: MeshSDK.ConfigMessageStatus)
  public init?(confirmAdding group: MeshSDK.Group, to model: MeshSDK.Model)
  public init?(confirmDeleting address: MeshSDK.Address, from model: MeshSDK.Model)
  public init?(confirmDeletingAllFrom model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct SensorDescriptorStatus : MeshSDK.SensorMessage {
  public static let opCode: Swift.UInt32
  public enum Result {
    case descriptors([MeshSDK.SensorDescriptor])
    case propertyNotFound(MeshSDK.DeviceProperty)
  }
  public let result: MeshSDK.SensorDescriptorStatus.Result
  public var parameters: Foundation.Data? {
    get
  }
  public init(propertyNotFound property: MeshSDK.DeviceProperty)
  public init(_ descriptors: [MeshSDK.SensorDescriptor])
  public init?(parameters: Foundation.Data)
}
public struct LightHSLSaturationSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public static var responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let saturation: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(saturation: Swift.UInt16)
  public init(saturation: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigNodeResetStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerDefaultGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightCTLTDefaultGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigSIGModelSubscriptionGet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public init?(of model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers open class MXMeshMessageHandle : ObjectiveC.NSObject {
  @objc public static var shard: MeshSDK.MXMeshMessageHandle
  @objc public var attrParams: [Swift.String : Any]
  @objc public func updateTranscodingMapping(data: Foundation.NSDictionary?)
  public static func identifierTakeOutService(oldIdentifier: Swift.String) -> (identifier: Swift.String, service: Swift.Int)
  @objc public static func createIdentifier(oldIdentifier: Swift.String, service: Swift.Int) -> Swift.String?
  @objc public static func identifierConvertToAttrType(identifier: Swift.String, attrMap: [Swift.String : Any]? = nil) -> Swift.String?
  @objc public static func properiesToMessageHex(identifier: Swift.String, value: Any, attrMap: [Swift.String : Any]? = nil) -> Swift.String?
  @objc public static func resolveMeshMessageToProperties(message: Swift.String, attrMap: [Swift.String : Any]? = nil) -> [Swift.String : Any]
  @objc public static func getMeshResolveMap(attrType: Swift.String, attrInfo: [Swift.String : Any]) -> [Swift.String : Any]?
  @objc deinit
}
public struct SensorCadenceStatus : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public let property: MeshSDK.DeviceProperty
  public let cadence: MeshSDK.SensorCadence?
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, cadence: MeshSDK.SensorCadence?)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Node {
  public func knows(applicationKey: MeshSDK.ApplicationKey) -> Swift.Bool
  public func knows(applicationKeyIndex: MeshSDK.KeyIndex) -> Swift.Bool
  public func knows(networkKey: MeshSDK.NetworkKey) -> Swift.Bool
  public func knows(networkKeyIndex: MeshSDK.KeyIndex) -> Swift.Bool
  public func hasModelBoundTo(_ applicationKey: MeshSDK.ApplicationKey) -> Swift.Bool
  public func hasApplicationKeyBoundTo(_ networkKey: MeshSDK.NetworkKey) -> Swift.Bool
  public func applicationKeysAvailableFor(_ model: MeshSDK.Model) -> [MeshSDK.ApplicationKey]
}
extension Swift.Array where Element == MeshSDK.Node {
  public func knows(applicationKey: MeshSDK.ApplicationKey) -> Swift.Bool
  public func knows(applicationKeyIndex: MeshSDK.KeyIndex) -> Swift.Bool
  public func knows(networkKey: MeshSDK.NetworkKey) -> Swift.Bool
  public func knows(networkKeyIndex: MeshSDK.KeyIndex) -> Swift.Bool
}
public struct ConfigVendorModelSubscriptionList : MeshSDK.ConfigModelSubscriptionList, MeshSDK.ConfigVendorModelMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.ConfigMessageStatus
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16
  public let addresses: [MeshSDK.Address]
  public init(responseTo request: MeshSDK.ConfigVendorModelSubscriptionGet, with addresses: [MeshSDK.Address])
  public init(responseTo request: MeshSDK.ConfigVendorModelSubscriptionGet, with status: MeshSDK.ConfigMessageStatus)
  public init?(parameters: Foundation.Data)
}
public enum NodeIdentity : Swift.UInt8 {
  case stopped
  case running
  case notSupported
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension MeshSDK.NodeIdentity : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc public class UnprovisionedDevice : ObjectiveC.NSObject {
  public var name: Swift.String?
  final public let uuid: Foundation.UUID
  final public let oobInformation: MeshSDK.OobInformation
  public init(name: Swift.String? = nil, uuid: Foundation.UUID, oobInformation: MeshSDK.OobInformation = OobInformation(rawValue: 0))
  public init?(advertisementData: [Swift.String : Any])
  @objc deinit
}
public protocol Key {
  var name: Swift.String { get set }
  var index: MeshSDK.KeyIndex { get }
  var key: Foundation.Data { get }
}
public struct GenericPowerDefaultSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let power: Swift.UInt16
  public init(power: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public struct SensorCadenceSetUnacknowledged : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public let property: MeshSDK.DeviceProperty
  public let cadence: MeshSDK.SensorCadence
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, to cadence: MeshSDK.SensorCadence)
  public init?(parameters: Foundation.Data)
}
public struct ConfigNetKeyStatus : MeshSDK.ConfigNetKeyMessage, MeshSDK.ConfigStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let status: MeshSDK.ConfigMessageStatus
  public init(confirm networkKey: MeshSDK.NetworkKey)
  public init(responseTo request: any MeshSDK.ConfigNetKeyMessage, with status: MeshSDK.ConfigMessageStatus)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshSDK {
  public func lookupNode(uuid: Swift.String) -> MeshSDK.Node?
  public func getMeshNode(address: Swift.String) -> MeshSDK.Node?
  @objc dynamic public func addNode(jsonObject: Swift.Dictionary<Swift.String, Any>) -> Swift.Bool
  @objc dynamic public func deleteNode(uuid: Swift.String) -> Swift.Bool
  @objc dynamic public func resetNode(uuid: Swift.String, callback: MeshSDK.MeshSDK.MXMeshProvisionCallback? = nil)
  @objc dynamic public func fetchAllNodeUUID() -> Swift.Array<Swift.String>
  @objc dynamic public func getNodeAddress(uuid: Swift.String) -> Swift.String
  @objc dynamic public func getNodeUUID(mac: Swift.String) -> Swift.String?
  public func getNodeElement(address: Swift.String) -> MeshSDK.Element?
  @objc dynamic public func getNodeElementInfo(address: Swift.String) -> Swift.Dictionary<Swift.String, Any>?
  @objc dynamic public func getNodeInfo(uuid: Swift.String) -> Swift.Dictionary<Swift.String, Any>?
}
public struct LightLightnessRangeGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightLCModeStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ status: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
public struct ConfigModelAppUnbind : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAppKeyMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let applicationKeyIndex: MeshSDK.KeyIndex
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(applicationKey: MeshSDK.ApplicationKey, to model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerRangeStatus : MeshSDK.GenericStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.GenericMessageStatus
  public let range: Swift.ClosedRange<Swift.UInt16>
  public init(report range: Swift.ClosedRange<Swift.UInt16>)
  public init(_ status: MeshSDK.GenericMessageStatus, for request: MeshSDK.GenericPowerRangeSet)
  public init(_ status: MeshSDK.GenericMessageStatus, for request: MeshSDK.GenericPowerRangeSetUnacknowledged)
  public init?(parameters: Foundation.Data)
}
public class RangeObject {
  public var range: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public var lowerBound: Swift.UInt16 {
    get
  }
  public var upperBound: Swift.UInt16 {
    get
  }
  public var count: Swift.Int {
    get
  }
  required public init(from lowerBound: Swift.UInt16, to upperBound: Swift.UInt16)
  required public init(_ range: Swift.ClosedRange<Swift.UInt16>)
  @objc deinit
}
extension MeshSDK.RangeObject : Swift.Equatable {
  public static func == (left: MeshSDK.RangeObject, right: MeshSDK.RangeObject) -> Swift.Bool
  public static func == (left: MeshSDK.RangeObject, right: Swift.ClosedRange<Swift.UInt16>) -> Swift.Bool
  public static func != (left: MeshSDK.RangeObject, right: MeshSDK.RangeObject) -> Swift.Bool
  public static func != (left: MeshSDK.RangeObject, right: Swift.ClosedRange<Swift.UInt16>) -> Swift.Bool
}
extension MeshSDK.RangeObject : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public func + <T>(left: T, right: T) -> [T] where T : MeshSDK.RangeObject
public func - <T>(left: T, right: T) -> [T] where T : MeshSDK.RangeObject
public func + <T>(array: [T], other: T) -> [T] where T : MeshSDK.RangeObject
public func + (array: [MeshSDK.AddressRange], otherArray: [MeshSDK.AddressRange]) -> [MeshSDK.AddressRange]
public func + (array: [MeshSDK.SceneRange], otherArray: [MeshSDK.SceneRange]) -> [MeshSDK.SceneRange]
public func - <T>(array: [T], other: T) -> [T] where T : MeshSDK.RangeObject
public func - <T>(array: [T], otherArray: [T]) -> [T] where T : MeshSDK.RangeObject
public func += <T>(array: inout [T], other: T) where T : MeshSDK.RangeObject
public func += (array: inout [MeshSDK.AddressRange], otherArray: [MeshSDK.AddressRange])
public func += (array: inout [MeshSDK.SceneRange], otherArray: [MeshSDK.SceneRange])
public func -= <T>(array: inout [T], other: T) where T : MeshSDK.RangeObject
public func -= <T>(array: inout [T], otherArray: [T]) where T : MeshSDK.RangeObject
public struct LightHSLSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public static var responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let hue: Swift.UInt16
  public let saturation: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16)
  public init(lightness: Swift.UInt16, hue: Swift.UInt16, saturation: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class MeshNetwork : Swift.Codable {
  final public let uuid: Foundation.UUID
  public var timestamp: Foundation.Date {
    get
  }
  final public let isPartial: Swift.Bool
  public var meshName: Swift.String {
    get
    set
  }
  public var provisioners: [MeshSDK.Provisioner] {
    get
  }
  public var networkKeys: [MeshSDK.NetworkKey] {
    get
  }
  public var applicationKeys: [MeshSDK.ApplicationKey] {
    get
  }
  public var nodes: [MeshSDK.Node] {
    get
  }
  public var groups: [MeshSDK.Group] {
    get
  }
  public var scenes: [MeshSDK.Scene] {
    get
  }
  public var currentNetworkKey: MeshSDK.NetworkKey?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public struct Publish : Swift.Codable {
  public static let disabled: MeshSDK.Publish
  public struct Retransmit : Swift.Codable {
    public static let disabled: MeshSDK.Publish.Retransmit
    public let count: Swift.UInt8
    public let interval: Swift.UInt16
    public var steps: Swift.UInt8 {
      get
    }
    public init()
    public init(_ count: Swift.UInt8, timesWithInterval interval: Foundation.TimeInterval)
    public init(publishRetransmitCount: Swift.UInt8, intervalSteps: Swift.UInt8)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Period : Swift.Codable {
    public static let disabled: MeshSDK.Publish.Period
    public let numberOfSteps: Swift.UInt8
    public let resolution: MeshSDK.StepResolution
    public let interval: Foundation.TimeInterval
    public init()
    public init(_ interval: Foundation.TimeInterval)
    public init(steps: Swift.UInt8, resolution: MeshSDK.StepResolution)
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public var publicationAddress: MeshSDK.MeshAddress {
    get
  }
  public let index: MeshSDK.KeyIndex
  public let ttl: Swift.UInt8
  public let period: MeshSDK.Publish.Period
  public let retransmit: MeshSDK.Publish.Retransmit
  public init(to destination: MeshSDK.MeshAddress, using applicationKey: MeshSDK.ApplicationKey, usingFriendshipMaterial friendshipCredentialsFlag: Swift.Bool, ttl: Swift.UInt8, period: MeshSDK.Publish.Period, retransmit: MeshSDK.Publish.Retransmit)
  @available(*, deprecated, message: "Use the other constructor")
  public init(to destination: MeshSDK.MeshAddress, using applicationKey: MeshSDK.ApplicationKey, usingFriendshipMaterial friendshipCredentialsFlag: Swift.Bool, ttl: Swift.UInt8, periodSteps: Swift.UInt8, periodResolution: MeshSDK.StepResolution, retransmit: MeshSDK.Publish.Retransmit)
  public init()
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension MeshSDK.Publish {
  public var isCancel: Swift.Bool {
    get
  }
  public var isUsingMasterSecurityMaterial: Swift.Bool {
    get
  }
  public var isUsingFriendshipSecurityMaterial: Swift.Bool {
    get
  }
}
extension MeshSDK.Publish : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.Publish.Retransmit : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MeshSDK.Publish.Period : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ConfigNetworkTransmitGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightHSLSaturationGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessRangeSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let min: Swift.UInt16
  public let max: Swift.UInt16
  public var range: Swift.ClosedRange<Swift.UInt16> {
    get
  }
  public init(_ range: Swift.ClosedRange<Swift.UInt16>)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.MeshNetwork {
  public func isAddressRangeValid(_ address: MeshSDK.Address, elementsCount count: Swift.UInt8) -> Swift.Bool
  public func isAddressRangeAvailable(_ address: MeshSDK.Address, elementsCount count: Swift.UInt8, for node: MeshSDK.Node? = nil) -> Swift.Bool
  public func nextAvailableUnicastAddress(startingFrom offset: MeshSDK.Address = Address.minUnicastAddress, using provisioner: MeshSDK.Provisioner) -> MeshSDK.Address?
  public func nextAvailableUnicastAddress(startingFrom offset: MeshSDK.Address = Address.minUnicastAddress, forElementsCount elementsCount: Swift.UInt8) -> MeshSDK.Address?
  public func nextAvailableUnicastAddress(startingFrom offset: MeshSDK.Address = Address.mx_minUnicastAddress, for elementsCount: Swift.UInt8, elementsUsing provisioner: MeshSDK.Provisioner) -> MeshSDK.Address?
  public func nextAvailableUnicastAddress(for provisioner: MeshSDK.Provisioner) -> MeshSDK.Address?
  public func nextAvailableGroupAddress(for provisioner: MeshSDK.Provisioner) -> MeshSDK.Address?
  public func nextAvailableGroupAddress() -> MeshSDK.Address?
}
public struct GenericPowerLastGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct GenericLevelSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static let opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let level: Swift.Int16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(level: Swift.Int16)
  public init(level: Swift.Int16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public typealias KeyIndex = Swift.UInt16
extension Swift.UInt16 {
  public var isValidKeyIndex: Swift.Bool {
    get
  }
}
public struct LightLightnessDefaultSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public init(lightness: Swift.UInt16)
  public init?(parameters: Foundation.Data)
}
public enum ProxyFilerType : Swift.UInt8 {
  case inclusionList
  case exclusionList
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol ProxyFilterDelegate : AnyObject {
  func proxyFilterUpdated(type: MeshSDK.ProxyFilerType, addresses: Swift.Set<MeshSDK.Address>)
  func proxyFilterUpdateAcknowledged(type: MeshSDK.ProxyFilerType, listSize: Swift.UInt16)
  func limitedProxyFilterDetected(maxSize: Swift.Int)
}
extension MeshSDK.ProxyFilterDelegate {
  public func limitedProxyFilterDetected(maxSize: Swift.Int)
}
public enum ProxyFilterSetup {
  case automatic
  case inclusionList(addresses: Swift.Set<MeshSDK.Address>)
  case exclusionList(addresses: Swift.Set<MeshSDK.Address>)
}
@_hasMissingDesignatedInitializers public class ProxyFilter {
  weak public var delegate: (any MeshSDK.ProxyFilterDelegate)?
  public var initialState: MeshSDK.ProxyFilterSetup
  public var addresses: Swift.Set<MeshSDK.Address> {
    get
  }
  public var type: MeshSDK.ProxyFilerType {
    get
  }
  public var proxy: MeshSDK.Node? {
    get
  }
  @objc deinit
}
extension MeshSDK.ProxyFilter {
  public func setType(_ type: MeshSDK.ProxyFilerType)
  public func reset()
  public func clear()
  public func add(address: MeshSDK.Address)
  public func add(addresses: [MeshSDK.Address])
  public func add(addresses: Swift.Set<MeshSDK.Address>)
  public func add(groups: [MeshSDK.Group])
  public func remove(address: MeshSDK.Address)
  public func remove(addresses: [MeshSDK.Address])
  public func remove(addresses: Swift.Set<MeshSDK.Address>)
  public func remove(groups: [MeshSDK.Group])
  public func setup(for provisioner: MeshSDK.Provisioner)
  public func proxyDidDisconnect()
}
extension MeshSDK.ProxyFilerType : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct LightLightnessLinearStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let targetLightness: Swift.UInt16?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(lightness: Swift.UInt16)
  public init(lightness: Swift.UInt16, targetLightness: Swift.UInt16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct ConfigAppKeyList : MeshSDK.ConfigStatusMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let status: MeshSDK.ConfigMessageStatus
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let applicationKeyIndexes: [MeshSDK.KeyIndex]
  public init(responseTo request: MeshSDK.ConfigAppKeyGet, with applicationKeys: [MeshSDK.ApplicationKey])
  public init(responseTo request: MeshSDK.ConfigAppKeyGet, with status: MeshSDK.ConfigMessageStatus)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Element {
  public func hasModelBoundTo(_ applicationKey: MeshSDK.ApplicationKey) -> Swift.Bool
}
extension MeshSDK.MeshSDK {
  @objc dynamic public func getFeatureFlag(uuid: Swift.String) -> Swift.UInt8
  @objc dynamic public func isMxchipDevice(uuid: Swift.String) -> Swift.Bool
  @objc dynamic public func getDeviceMacAddress(uuid: Swift.String) -> Swift.String
  @objc dynamic public func getDeviceProductId(uuid: Swift.String) -> Swift.String
  @objc dynamic public func getNextTid() -> Swift.String
}
extension Swift.String {
  public var bigEndian: Swift.String {
    get
  }
  public var littleEndian: Swift.String {
    get
  }
}
public struct LightLightnessDefaultGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightLCOccupancyModeSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ mode: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessLinearSetUnacknowledged : MeshSDK.GenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(lightness: Swift.UInt16)
  public init(lightness: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct ConfigHeartbeatPublicationGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerLevelStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let power: Swift.UInt16
  public let targetPower: Swift.UInt16?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(power: Swift.UInt16)
  public init(power: Swift.UInt16, targetPower: Swift.UInt16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public enum GattBearerError : Swift.Error {
  case deviceNotSupported
  public static func == (a: MeshSDK.GattBearerError, b: MeshSDK.GattBearerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.GattBearerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct LightLCPropertySetUnacknowledged : MeshSDK.SensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public let property: MeshSDK.DeviceProperty
  public let propertyValue: MeshSDK.DevicePropertyCharacteristic
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, value: MeshSDK.DevicePropertyCharacteristic)
  public init?(parameters: Foundation.Data)
}
public enum BatteryPresence : Swift.UInt8 {
  case notPresent
  case removable
  case notRemovable
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum BatteryIndicator : Swift.UInt8 {
  case criticallyLow
  case low
  case good
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum BatteryChargingState : Swift.UInt8 {
  case notChargeable
  case notCharging
  case charging
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum BatteryServiceability : Swift.UInt8 {
  case reserved
  case serviceNotRequired
  case serviceRequired
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct GenericBatteryStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let batteryLevel: Swift.UInt8
  public let timeToDischarge: Swift.UInt32
  public let timeToCharge: Swift.UInt32
  public let flags: Swift.UInt8
  public var isBatteryLevelKnown: Swift.Bool {
    get
  }
  public var isTimeToDischargeKnown: Swift.Bool {
    get
  }
  public var isTimeToChargeKnown: Swift.Bool {
    get
  }
  public var batteryPresence: MeshSDK.BatteryPresence {
    get
  }
  public var batteryIndicator: MeshSDK.BatteryIndicator {
    get
  }
  public var batteryChargingState: MeshSDK.BatteryChargingState {
    get
  }
  public var batteryServiceability: MeshSDK.BatteryServiceability {
    get
  }
  public init(level batteryLevel: Swift.UInt8, timeToDischarge: Swift.UInt32, andCharge timeToCharge: Swift.UInt32, battery batteryPresence: MeshSDK.BatteryPresence, state batteryIndicator: MeshSDK.BatteryIndicator, charging batteryChargingState: MeshSDK.BatteryChargingState, service batteryServiceability: MeshSDK.BatteryServiceability)
  public init?(parameters: Foundation.Data)
}
public struct ConfigLowPowerNodePollTimeoutGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let lpnAddress: MeshSDK.Address
  public init?(from address: MeshSDK.Address)
  public init?(parameters: Foundation.Data)
}
public struct ConfigNodeIdentitySet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let identity: MeshSDK.NodeIdentity
  public init(networkKey: MeshSDK.NetworkKey, identity: MeshSDK.NodeIdentity)
  public init?(parameters: Foundation.Data)
}
public struct GenericPowerRangeSetUnacknowledged : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let range: Swift.ClosedRange<Swift.UInt16>
  public init(range: Swift.ClosedRange<Swift.UInt16>)
  public init?(parameters: Foundation.Data)
}
public struct LightLCOccupancyModeSet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init(_ mode: Swift.Bool)
  public init?(parameters: Foundation.Data)
}
public struct SensorSeriesGet : MeshSDK.AcknowledgedSensorPropertyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public let property: MeshSDK.DeviceProperty
  public let rawValueX1: Foundation.Data
  public let rawValueX2: Foundation.Data
  public var parameters: Foundation.Data? {
    get
  }
  public init(of property: MeshSDK.DeviceProperty, rawValueX1: Foundation.Data, rawValueX2: Foundation.Data)
  public init?(parameters: Foundation.Data)
}
public protocol ProxyConfigurationMessage : MeshSDK.BaseMeshMessage {
  var opCode: Swift.UInt8 { get }
}
public protocol StaticProxyConfigurationMessage : MeshSDK.ProxyConfigurationMessage {
  static var opCode: Swift.UInt8 { get }
}
public protocol AcknowledgedProxyConfigurationMessage : MeshSDK.ProxyConfigurationMessage {
  var responseOpCode: Swift.UInt8 { get }
}
public protocol StaticAcknowledgedProxyConfigurationMessage : MeshSDK.AcknowledgedProxyConfigurationMessage, MeshSDK.StaticProxyConfigurationMessage {
  static var responseType: any MeshSDK.StaticProxyConfigurationMessage.Type { get }
}
extension MeshSDK.StaticProxyConfigurationMessage {
  public var opCode: Swift.UInt8 {
    get
  }
}
extension MeshSDK.StaticAcknowledgedProxyConfigurationMessage {
  public var responseOpCode: Swift.UInt8 {
    get
  }
}
public struct SceneGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct LightLightnessLinearSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public static var responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(lightness: Swift.UInt16)
  public init(lightness: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public struct LightCTLStatus : MeshSDK.GenericMessage, MeshSDK.TransitionStatusMessage {
  public static var opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let temperature: Swift.UInt16
  public let targetLightness: Swift.UInt16?
  public let targetTemperature: Swift.UInt16?
  public let remainingTime: MeshSDK.TransitionTime?
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16)
  public init(lightness: Swift.UInt16, temperature: Swift.UInt16, targetLightness: Swift.UInt16, targetTemperature: Swift.UInt16, remainingTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
public struct ConfigRelayStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let state: MeshSDK.NodeFeatureState
  public let count: Swift.UInt8
  public let steps: Swift.UInt8
  public var interval: Foundation.TimeInterval {
    get
  }
  public init(_ state: MeshSDK.NodeFeatureState, count: Swift.UInt8, steps: Swift.UInt8)
  public init(for node: MeshSDK.Node)
  public init?(parameters: Foundation.Data)
}
public struct GenericDefaultTransitionTimeStatus : MeshSDK.GenericMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let transitionTime: MeshSDK.TransitionTime
  public init(transitionTime: MeshSDK.TransitionTime)
  public init?(parameters: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class Group : Swift.Codable {
  public var name: Swift.String {
    get
    set
  }
  final public let address: MeshSDK.MeshAddress
  public var parent: MeshSDK.Group? {
    get
    set
  }
  public init(name: Swift.String, address: MeshSDK.MeshAddress) throws
  convenience public init(name: Swift.String, address: MeshSDK.Address) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension MeshSDK.Group : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: MeshSDK.Group, rhs: MeshSDK.Group) -> Swift.Bool
  public static func != (lhs: MeshSDK.Group, rhs: MeshSDK.Group) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.Group {
  public static let allNodes: MeshSDK.Group
  public static let allRelays: MeshSDK.Group
  public static let allFriends: MeshSDK.Group
  public static let allProxies: MeshSDK.Group
  public static let specialGroups: [MeshSDK.Group]
  public static func specialGroup(withAddress address: MeshSDK.Address) -> MeshSDK.Group?
  public static func specialGroup(withAddress address: MeshSDK.MeshAddress) -> MeshSDK.Group?
}
extension MeshSDK.Model {
  public func isSubscribed(to group: MeshSDK.Group) -> Swift.Bool
  public func isSubscribed(to address: MeshSDK.MeshAddress) -> Swift.Bool
}
public struct LightLightnessSet : MeshSDK.AcknowledgedGenericMessage, MeshSDK.TransactionMessage, MeshSDK.TransitionMessage {
  public static var opCode: Swift.UInt32
  public static var responseType: any MeshSDK.StaticMeshMessage.Type
  public var tid: Swift.UInt8!
  public var parameters: Foundation.Data? {
    get
  }
  public let lightness: Swift.UInt16
  public let transitionTime: MeshSDK.TransitionTime?
  public let delay: Swift.UInt8?
  public init(lightness: Swift.UInt16)
  public init(lightness: Swift.UInt16, transitionTime: MeshSDK.TransitionTime, delay: Swift.UInt8)
  public init?(parameters: Foundation.Data)
}
public protocol CompositionDataPage {
  var page: Swift.UInt8 { get }
  var parameters: Foundation.Data? { get }
}
public struct ConfigCompositionDataStatus : MeshSDK.ConfigMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let page: (any MeshSDK.CompositionDataPage)?
  public init(report page: any MeshSDK.CompositionDataPage)
  public init?(parameters: Foundation.Data)
}
public struct Page0 : MeshSDK.CompositionDataPage {
  public let page: Swift.UInt8
  public let companyIdentifier: Swift.UInt16
  public let productIdentifier: Swift.UInt16
  public let versionIdentifier: Swift.UInt16
  public let minimumNumberOfReplayProtectionList: Swift.UInt16
  public let features: MeshSDK.NodeFeaturesState
  public let elements: [MeshSDK.Element]
  public var parameters: Foundation.Data? {
    get
  }
  public var isSegmented: Swift.Bool {
    get
  }
  public init(node: MeshSDK.Node)
  public init?(parameters: Foundation.Data)
}
public struct ConfigModelSubscriptionVirtualAddressOverwrite : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigVirtualLabelMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let virtualLabel: Foundation.UUID
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public init?(group: MeshSDK.Group, from model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct ConfigModelPublicationVirtualAddressSet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public let publish: MeshSDK.Publish
  public init?(_ publish: MeshSDK.Publish, to model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct ConfigModelPublicationSet : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigAnyModelMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public let publish: MeshSDK.Publish
  public init?(_ publish: MeshSDK.Publish, to model: MeshSDK.Model)
  public init?(disablePublicationFor model: MeshSDK.Model)
  public init?(parameters: Foundation.Data)
}
public struct ConfigAppKeyAdd : MeshSDK.AcknowledgedConfigMessage, MeshSDK.ConfigNetAndAppKeyMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let networkKeyIndex: MeshSDK.KeyIndex
  public let applicationKeyIndex: MeshSDK.KeyIndex
  public let key: Foundation.Data
  public init(applicationKey: MeshSDK.ApplicationKey)
  public init?(parameters: Foundation.Data)
}
public struct ConfigRelayGet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Group {
  public func scenes(onModelsBoundTo applicationKey: MeshSDK.ApplicationKey) -> [MeshSDK.Scene]
}
public enum ModelError : Swift.Error {
  case invalidMessage
  public static func == (a: MeshSDK.ModelError, b: MeshSDK.ModelError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ModelDelegate : AnyObject {
  typealias MessageComposer = () -> any MeshSDK.MeshMessage
  var messageTypes: [Swift.UInt32 : any MeshSDK.MeshMessage.Type] { get }
  var isSubscriptionSupported: Swift.Bool { get }
  var publicationMessageComposer: Self.MessageComposer? { get }
  func model(_ model: MeshSDK.Model, didReceiveAcknowledgedMessage request: any MeshSDK.AcknowledgedMeshMessage, from source: MeshSDK.Address, sentTo destination: MeshSDK.MeshAddress) throws -> any MeshSDK.MeshMessage
  func model(_ model: MeshSDK.Model, didReceiveUnacknowledgedMessage message: any MeshSDK.MeshMessage, from source: MeshSDK.Address, sentTo destination: MeshSDK.MeshAddress)
  func model(_ model: MeshSDK.Model, didReceiveResponse response: any MeshSDK.MeshMessage, toAcknowledgedMessage request: any MeshSDK.AcknowledgedMeshMessage, from source: MeshSDK.Address)
}
extension MeshSDK.ModelDelegate {
  @discardableResult
  public func publish(_ message: any MeshSDK.MeshMessage, using manager: MeshSDK.MeshNetworkManager) -> MeshSDK.MessageHandle?
  @discardableResult
  public func publish(using manager: MeshSDK.MeshNetworkManager) -> MeshSDK.MessageHandle?
}
public protocol SceneServerModelDelegate : MeshSDK.ModelDelegate {
  func networkDidExitStoredWithSceneState()
}
public protocol StoredWithSceneModelDelegate : MeshSDK.ModelDelegate {
  func store(with scene: MeshSDK.SceneNumber)
  func recall(_ scene: MeshSDK.SceneNumber, transitionTime: MeshSDK.TransitionTime?, delay: Swift.UInt8?)
}
extension MeshSDK.StoredWithSceneModelDelegate {
  public func networkDidExitStoredWithSceneState(_ network: MeshSDK.MeshNetwork)
}
public class TransactionHelper {
  public init()
  public func isNewTransaction(_ message: any MeshSDK.TransactionMessage, from source: MeshSDK.Address, to destination: MeshSDK.MeshAddress) -> Swift.Bool
  public func isTransactionContinuation(_ message: any MeshSDK.TransactionMessage, from source: MeshSDK.Address, to destination: MeshSDK.MeshAddress) -> Swift.Bool
  @objc deinit
}
extension Swift.Array where Element == any MeshSDK.StaticMeshMessage.Type {
  public func toMap() -> [Swift.UInt32 : any MeshSDK.MeshMessage.Type]
}
public enum MeshMessageError : Swift.Error {
  case invalidAddress
  case invalidPdu
  case invalidOpCode
  public static func == (a: MeshSDK.MeshMessageError, b: MeshSDK.MeshMessageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MeshSDK.MeshMessageError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct LightHSLTargetGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
public struct ConfigHeartbeatSubscriptionSet : MeshSDK.AcknowledgedConfigMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public let source: MeshSDK.Address
  public let destination: MeshSDK.Address
  public let periodLog: Swift.UInt8
  public var period: Swift.UInt16 {
    get
  }
  public var enablesSubscription: Swift.Bool {
    get
  }
  public init()
  public init?(startProcessingHeartbeatMessagesFor periodLog: Swift.UInt8, secondsSentFrom source: MeshSDK.Address, to destination: MeshSDK.Address)
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.Element {
  public func model(withSigModelId sigModelId: Swift.UInt16) -> MeshSDK.Model?
  public func model(withModelId modelId: Swift.UInt32) -> MeshSDK.Model?
  public func contains(modelWithSigModelId sigModelId: Swift.UInt16) -> Swift.Bool
  public func model(withModelId modelId: Swift.UInt16, definedBy companyId: Swift.UInt16) -> MeshSDK.Model?
  public func contains(modelWithId modelId: Swift.UInt32) -> Swift.Bool
  public func contains(model: MeshSDK.Model) -> Swift.Bool
  public func contains(modelBoundTo applicationKey: MeshSDK.ApplicationKey) -> Swift.Bool
  public func contains(modelSubscribedTo group: MeshSDK.Group) -> Swift.Bool
  public func models(subscribedTo group: MeshSDK.Group) -> [MeshSDK.Model]
}
extension Swift.Array where Element == MeshSDK.Element {
  public func contains(modelWithId modelId: Swift.UInt32) -> Swift.Bool
  public func contains(modelWithIdentifier modelIdentifier: Swift.UInt16) -> Swift.Bool
  public func contains(model: MeshSDK.Model) -> Swift.Bool
  public func contains(modelSubscribedTo group: MeshSDK.Group) -> Swift.Bool
  public func models(subscribedTo group: MeshSDK.Group) -> [MeshSDK.Model]
}
public struct ConfigModelAppStatus : MeshSDK.ConfigAppKeyMessage, MeshSDK.ConfigAnyModelMessage, MeshSDK.ConfigStatusMessage {
  public static let opCode: Swift.UInt32
  public var parameters: Foundation.Data? {
    get
  }
  public let applicationKeyIndex: MeshSDK.KeyIndex
  public let elementAddress: MeshSDK.Address
  public let modelIdentifier: Swift.UInt16
  public let companyIdentifier: Swift.UInt16?
  public let status: MeshSDK.ConfigMessageStatus
  public init<T>(confirm request: T) where T : MeshSDK.ConfigAnyModelMessage, T : MeshSDK.ConfigAppKeyMessage
  public init<T>(responseTo request: T, with status: MeshSDK.ConfigMessageStatus) where T : MeshSDK.ConfigAnyModelMessage, T : MeshSDK.ConfigAppKeyMessage
  public init?(parameters: Foundation.Data)
}
public class ProxyProtocolHandler {
  public init()
  public func segment(_ data: Foundation.Data, ofType messageType: MeshSDK.PduType, toMtu mtu: Swift.Int) -> [Foundation.Data]
  public func reassemble(_ data: Foundation.Data) -> (data: Foundation.Data, messageType: MeshSDK.PduType)?
  @objc deinit
}
public struct GenericPowerRangeGet : MeshSDK.AcknowledgedGenericMessage {
  public static let opCode: Swift.UInt32
  public static let responseType: any MeshSDK.StaticMeshMessage.Type
  public var parameters: Foundation.Data? {
    get
  }
  public init()
  public init?(parameters: Foundation.Data)
}
extension MeshSDK.RangeObject {
  public func contains(_ value: Swift.UInt16) -> Swift.Bool
  public func overlaps(_ other: MeshSDK.RangeObject) -> Swift.Bool
  public func distance(to other: MeshSDK.RangeObject) -> Swift.UInt16
}
extension Swift.Array where Element : MeshSDK.RangeObject {
  public func merged() -> [Element]
  public mutating func merge()
  public func contains(_ value: Swift.UInt16) -> Swift.Bool
  public func overlaps(_ other: MeshSDK.RangeObject) -> Swift.Bool
  public func overlaps(_ otherRanges: [MeshSDK.RangeObject]) -> Swift.Bool
}
extension MeshSDK.AddressRange {
  public var isValid: Swift.Bool {
    get
  }
  public var isUnicastRange: Swift.Bool {
    get
  }
  public var isGroupRange: Swift.Bool {
    get
  }
}
extension MeshSDK.SceneRange {
  public var isValid: Swift.Bool {
    get
  }
}
extension Swift.Array where Element == MeshSDK.AddressRange {
  public var isValid: Swift.Bool {
    get
  }
  public var isUnicastRange: Swift.Bool {
    get
  }
  public var isGroupRange: Swift.Bool {
    get
  }
}
extension Swift.Array where Element == MeshSDK.SceneRange {
  public var isValid: Swift.Bool {
    get
  }
}
extension MeshSDK.AddressRange {
  public static let allUnicastAddresses: MeshSDK.AddressRange
  public static let allGroupAddresses: MeshSDK.AddressRange
}
extension MeshSDK.SceneRange {
  public static let allScenes: MeshSDK.SceneRange
}
extension MeshSDK.LogLevel : Swift.Equatable {}
extension MeshSDK.LogLevel : Swift.Hashable {}
extension MeshSDK.LogLevel : Swift.RawRepresentable {}
extension MeshSDK.LogCategory : Swift.Equatable {}
extension MeshSDK.LogCategory : Swift.Hashable {}
extension MeshSDK.LogCategory : Swift.RawRepresentable {}
extension MeshSDK.MeshMessageSecurity : Swift.Equatable {}
extension MeshSDK.MeshMessageSecurity : Swift.Hashable {}
extension MeshSDK.LowerTransportError : Swift.Equatable {}
extension MeshSDK.LowerTransportError : Swift.Hashable {}
extension MeshSDK.SensorSamplingFunction : Swift.Equatable {}
extension MeshSDK.SensorSamplingFunction : Swift.Hashable {}
extension MeshSDK.SensorSamplingFunction : Swift.RawRepresentable {}
extension MeshSDK.BearerError : Swift.Equatable {}
extension MeshSDK.BearerError : Swift.Hashable {}
extension MeshSDK.NodeFeature : Swift.Equatable {}
extension MeshSDK.NodeFeature : Swift.Hashable {}
extension MeshSDK.NodeFeature : Swift.RawRepresentable {}
extension MeshSDK.NodeFeatureState : Swift.Equatable {}
extension MeshSDK.NodeFeatureState : Swift.Hashable {}
extension MeshSDK.NodeFeatureState : Swift.RawRepresentable {}
extension MeshSDK.MeshNetworkError : Swift.Equatable {}
extension MeshSDK.MeshNetworkError : Swift.Hashable {}
extension MeshSDK.StepResolution : Swift.Equatable {}
extension MeshSDK.StepResolution : Swift.Hashable {}
extension MeshSDK.StepResolution : Swift.RawRepresentable {}
extension MeshSDK.GenericMessageStatus : Swift.Equatable {}
extension MeshSDK.GenericMessageStatus : Swift.Hashable {}
extension MeshSDK.GenericMessageStatus : Swift.RawRepresentable {}
extension MeshSDK.SceneMessageStatus : Swift.Equatable {}
extension MeshSDK.SceneMessageStatus : Swift.Hashable {}
extension MeshSDK.SceneMessageStatus : Swift.RawRepresentable {}
extension MeshSDK.Security : Swift.Equatable {}
extension MeshSDK.Security : Swift.Hashable {}
extension MeshSDK.Security : Swift.RawRepresentable {}
extension MeshSDK.Algorithm : Swift.Equatable {}
extension MeshSDK.Algorithm : Swift.Hashable {}
extension MeshSDK.ConfigMessageStatus : Swift.Equatable {}
extension MeshSDK.ConfigMessageStatus : Swift.Hashable {}
extension MeshSDK.ConfigMessageStatus : Swift.RawRepresentable {}
extension MeshSDK.RemainingHeartbeatPublicationCount : Swift.Sendable {}
extension MeshSDK.RemainingHeartbeatSubscriptionPeriod : Swift.Sendable {}
extension MeshSDK.HeartbeatSubscriptionCount : Swift.Sendable {}
extension MeshSDK.PduType : Swift.Equatable {}
extension MeshSDK.PduType : Swift.Hashable {}
extension MeshSDK.PduType : Swift.RawRepresentable {}
extension MeshSDK.AccessError : Swift.Equatable {}
extension MeshSDK.AccessError : Swift.Hashable {}
extension MeshSDK.SensorSettingStatus.SensorSettingAccess : Swift.Equatable {}
extension MeshSDK.SensorSettingStatus.SensorSettingAccess : Swift.Hashable {}
extension MeshSDK.SensorSettingStatus.SensorSettingAccess : Swift.RawRepresentable {}
extension MeshSDK.Location : Swift.Equatable {}
extension MeshSDK.Location : Swift.Hashable {}
extension MeshSDK.Location : Swift.RawRepresentable {}
extension MeshSDK.VendorMessageOpCode : Swift.Equatable {}
extension MeshSDK.VendorMessageOpCode : Swift.Hashable {}
extension MeshSDK.VendorMessageOpCode : Swift.RawRepresentable {}
extension MeshSDK.MeshMessageSendStatusCode : Swift.Equatable {}
extension MeshSDK.MeshMessageSendStatusCode : Swift.Hashable {}
extension MeshSDK.MeshMessageSendStatusCode : Swift.RawRepresentable {}
extension MeshSDK.RemoteProvisioningError : Swift.Equatable {}
extension MeshSDK.RemoteProvisioningError : Swift.Hashable {}
extension MeshSDK.RemoteProvisioningError : Swift.RawRepresentable {}
extension MeshSDK.OnPowerUp : Swift.Equatable {}
extension MeshSDK.OnPowerUp : Swift.Hashable {}
extension MeshSDK.OnPowerUp : Swift.RawRepresentable {}
extension MeshSDK.KeyRefreshPhase : Swift.Equatable {}
extension MeshSDK.KeyRefreshPhase : Swift.Hashable {}
extension MeshSDK.KeyRefreshPhase : Swift.RawRepresentable {}
extension MeshSDK.KeyRefreshPhaseTransition : Swift.Equatable {}
extension MeshSDK.KeyRefreshPhaseTransition : Swift.Hashable {}
extension MeshSDK.KeyRefreshPhaseTransition : Swift.RawRepresentable {}
extension MeshSDK.OutputAction : Swift.Equatable {}
extension MeshSDK.OutputAction : Swift.Hashable {}
extension MeshSDK.OutputAction : Swift.RawRepresentable {}
extension MeshSDK.InputAction : Swift.Equatable {}
extension MeshSDK.InputAction : Swift.Hashable {}
extension MeshSDK.InputAction : Swift.RawRepresentable {}
extension MeshSDK.NodeIdentity : Swift.Equatable {}
extension MeshSDK.NodeIdentity : Swift.Hashable {}
extension MeshSDK.NodeIdentity : Swift.RawRepresentable {}
extension MeshSDK.ProxyFilerType : Swift.Equatable {}
extension MeshSDK.ProxyFilerType : Swift.Hashable {}
extension MeshSDK.ProxyFilerType : Swift.RawRepresentable {}
extension MeshSDK.GattBearerError : Swift.Equatable {}
extension MeshSDK.GattBearerError : Swift.Hashable {}
extension MeshSDK.BatteryPresence : Swift.Equatable {}
extension MeshSDK.BatteryPresence : Swift.Hashable {}
extension MeshSDK.BatteryPresence : Swift.RawRepresentable {}
extension MeshSDK.BatteryIndicator : Swift.Equatable {}
extension MeshSDK.BatteryIndicator : Swift.Hashable {}
extension MeshSDK.BatteryIndicator : Swift.RawRepresentable {}
extension MeshSDK.BatteryChargingState : Swift.Equatable {}
extension MeshSDK.BatteryChargingState : Swift.Hashable {}
extension MeshSDK.BatteryChargingState : Swift.RawRepresentable {}
extension MeshSDK.BatteryServiceability : Swift.Equatable {}
extension MeshSDK.BatteryServiceability : Swift.Hashable {}
extension MeshSDK.BatteryServiceability : Swift.RawRepresentable {}
extension MeshSDK.ModelError : Swift.Equatable {}
extension MeshSDK.ModelError : Swift.Hashable {}
extension MeshSDK.MeshMessageError : Swift.Equatable {}
extension MeshSDK.MeshMessageError : Swift.Hashable {}
